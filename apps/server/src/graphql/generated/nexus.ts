/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    DateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    DateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  DateFilterInput: { // input type
    gte?: string | null; // String
    lte?: string | null; // String
  }
  DesignProductCreateOrderInput: { // input type
    designProductId: string; // ID!
    orderItems: NexusGenInputs['DesignProductCreateOrderItemInput'][]; // [DesignProductCreateOrderItemInput!]!
    shippingAddressId?: string | null; // ID
  }
  DesignProductCreateOrderItemInput: { // input type
    catalogProductVariantId: string; // ID!
    quantity: number; // Int!
  }
  DesignRequestApproveInput: { // input type
    description?: string | null; // String
    designProofId: string; // ID!
    designRequestId: string; // ID!
    name: string; // String!
    termsConditionsAgreed: boolean; // Boolean!
  }
  DesignRequestConversationMessageCreateInput: { // input type
    designRequestId: string; // ID!
    fileIds: string[]; // [String!]!
    message: string; // String!
  }
  DesignRequestCreateInput: { // input type
    description?: string | null; // String
    name?: string | null; // String
    product: NexusGenInputs['DesignRequestProductCreateInput']; // DesignRequestProductCreateInput!
    useCase?: string | null; // String
  }
  DesignRequestDesignLocationCreateInput: { // input type
    description?: string | null; // String
    designRequestId: string; // ID!
    fileIds: string[]; // [ID!]!
    placement: string; // String!
  }
  DesignRequestDesignLocationDeleteInput: { // input type
    designRequestDesignLocationId: string; // ID!
    designRequestId: string; // ID!
  }
  DesignRequestDesignLocationUpdateInput: { // input type
    description?: string | null; // String
    designRequestDesignLocationId: string; // ID!
    designRequestId: string; // ID!
    fileIds: string[]; // [ID!]!
    placement?: string | null; // String
  }
  DesignRequestProductColorCreateInput: { // input type
    catalogProductColorId: string; // ID!
    hexCode?: string | null; // String
    name?: string | null; // String
  }
  DesignRequestProductCreateInput: { // input type
    catalogProductId: string; // ID!
    colors: NexusGenInputs['DesignRequestProductColorCreateInput'][]; // [DesignRequestProductColorCreateInput!]!
  }
  DesignRequestProofCreateInput: { // input type
    designRequestId: string; // ID!
    message?: string | null; // String
    primaryImageFileId: string; // String!
    proofLocations: NexusGenInputs['DesignRequestProofCreateProofLocationInput'][]; // [DesignRequestProofCreateProofLocationInput!]!
    proofVariants: NexusGenInputs['DesignRequestProofCreateProofVariantInput'][]; // [DesignRequestProofCreateProofVariantInput!]!
  }
  DesignRequestProofCreateProofLocationInput: { // input type
    colorCount?: number | null; // Int
    fileId: string; // ID!
    placement: string; // String!
  }
  DesignRequestProofCreateProofVariantInput: { // input type
    catalogProductColorId: string; // ID!
    hexCode: string; // String!
    imageFileIds: string[]; // [ID!]!
    name: string; // String!
  }
  DesignRequestRevisionRequestCreateInput: { // input type
    description: string; // String!
    designRequestId: string; // ID!
    fileIds: string[]; // [String!]!
  }
  DesignRequestSubmitInput: { // input type
    designRequestId: string; // ID!
  }
  DesignRequestUpdateInput: { // input type
    description?: string | null; // String
    designRequestId: string; // ID!
    fileIds?: string[] | null; // [ID!]
    locations?: NexusGenInputs['DesignRequestUpdateLocationInput'][] | null; // [DesignRequestUpdateLocationInput!]
    name?: string | null; // String
    useCase?: string | null; // String
  }
  DesignRequestUpdateLocationInput: { // input type
    description?: string | null; // String
    designLocationId?: string | null; // ID
    fileIds?: string[] | null; // [ID!]
    placement?: string | null; // String
  }
  FileCreateBatchInput: { // input type
    files: NexusGenInputs['FileCreateInput'][]; // [FileCreateInput!]!
  }
  FileCreateInput: { // input type
    bytes: number; // Int!
    cloudinaryAssetId?: string | null; // String
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    height?: number | null; // Int
    name: string; // String!
    originalFilename: string; // String!
    url: string; // String!
    width?: number | null; // Int
  }
  FulfillmentCreateInput: { // input type
    carrier: string; // String!
    orderId: string; // String!
    trackingNumber: string; // String!
    trackingUrl: string; // String!
  }
  MailingAddressCreateInput: { // input type
    address1?: string | null; // String
    address2?: string | null; // String
    city?: string | null; // String
    company?: string | null; // String
    country?: string | null; // String
    firstName?: string | null; // String
    lastName?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
    province?: string | null; // String
    provinceCode?: string | null; // String
    zip?: string | null; // String
  }
  MembershipDesignProductsFilterInput: { // input type
    where?: NexusGenInputs['MembershipDesignProductsWhereFilterInput'] | null; // MembershipDesignProductsWhereFilterInput
  }
  MembershipDesignProductsWhereFilterInput: { // input type
    createdAt?: NexusGenInputs['DateFilterInput'] | null; // DateFilterInput
    membershipId?: NexusGenInputs['StringFilterInput'] | null; // StringFilterInput
  }
  MembershipDesignRequestsFilterInput: { // input type
    where?: NexusGenInputs['MembershipDesignRequestsWhereFilterInput'] | null; // MembershipDesignRequestsWhereFilterInput
  }
  MembershipDesignRequestsWhereFilterInput: { // input type
    createdAt?: NexusGenInputs['DateFilterInput'] | null; // DateFilterInput
    membershipId?: NexusGenInputs['StringFilterInput'] | null; // StringFilterInput
  }
  MembershipInviteAcceptInput: { // input type
    membershipId: string; // String!
  }
  MembershipInviteInput: { // input type
    emails: string[]; // [String!]!
  }
  MembershipInviteResendInput: { // input type
    membershipId: string; // String!
  }
  MembershipInviteRevokeInput: { // input type
    membershipId: string; // String!
  }
  MembershipOrdersFilterInput: { // input type
    where?: NexusGenInputs['MembershipOrdersWhereFilterInput'] | null; // MembershipOrdersWhereFilterInput
  }
  MembershipOrdersWhereFilterInput: { // input type
    createdAt?: NexusGenInputs['DateFilterInput'] | null; // DateFilterInput
  }
  OrderCartCreateItemsInput: { // input type
    productVariantEntityId: number; // Int!
    quantity: number; // Int!
  }
  OrderCartCreatePrintLocationInput: { // input type
    colorCount: number; // Int!
  }
  OrderConfirmInput: { // input type
    customerEmail: string; // String!
    customerFirstName: string; // String!
    customerLastName: string; // String!
    customerPhone: string; // String!
    orderId: string; // ID!
    shippingAddress: NexusGenInputs['OrderConfirmMailingAddressInput']; // OrderConfirmMailingAddressInput!
  }
  OrderConfirmMailingAddressInput: { // input type
    address1?: string | null; // String
    address2?: string | null; // String
    city?: string | null; // String
    company?: string | null; // String
    country?: string | null; // String
    firstName?: string | null; // String
    lastName?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
    province?: string | null; // String
    provinceCode?: string | null; // String
    zip?: string | null; // String
  }
  OrganizationBrandColorCreateInput: { // input type
    cmykC: number; // Int!
    cmykK: number; // Int!
    cmykM: number; // Int!
    cmykY: number; // Int!
    hex: string; // String!
    name: string; // String!
    organizationId: string; // ID!
    pantone?: string | null; // String
  }
  OrganizationBrandColorDeleteInput: { // input type
    colorId: string; // String!
    organizationId: string; // ID!
  }
  OrganizationBrandColorUpdateInput: { // input type
    cmykC: number; // Int!
    cmykK: number; // Int!
    cmykM: number; // Int!
    cmykY: number; // Int!
    hex: string; // String!
    id: string; // String!
    name: string; // String!
    organizationId: string; // ID!
    pantone?: string | null; // String
  }
  OrganizationBrandFileCreateBatchFileInput: { // input type
    fileId: string; // ID!
  }
  OrganizationBrandFileCreateBatchInput: { // input type
    files: NexusGenInputs['OrganizationBrandFileCreateBatchFileInput'][]; // [OrganizationBrandFileCreateBatchFileInput!]!
    organizationId: string; // ID!
  }
  OrganizationBrandFileDeleteBatchInput: { // input type
    fileIds: string[]; // [ID!]!
  }
  OrganizationUpdateInput: { // input type
    name?: string | null; // String
    organizationId: string; // ID!
  }
  PaymentIntentCreateInput: { // input type
    orderId: string; // String!
  }
  ProductKey: { // input type
    id: string; // ID!
    prices: NexusGenInputs['ProductPrice']; // ProductPrice!
  }
  ProductPrice: { // input type
    price: NexusGenInputs['ProductPriceValue']; // ProductPriceValue!
  }
  ProductPriceValue: { // input type
    value: number; // Float!
  }
  QuoteGeneratePrintLocationInput: { // input type
    colorCount: number; // Int!
  }
  StringFilterInput: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  SubscriberCreateInput: { // input type
    email: string; // String!
  }
  UserOrganizationCreateInput: { // input type
    name: string; // String!
  }
  UserSetOrganizationInput: { // input type
    membershipId: string; // ID!
    organizationId: string; // ID!
  }
}

export interface NexusGenEnums {
  DesignRequestHistoryItemDesignRequestEventMethod: "CREATE"
  DesignRequestStatus: "APPROVED" | "AWAITING_APPROVAL" | "AWAITING_REVISION" | "DRAFT" | "REJECTED" | "SUBMITTED"
  FileType: "IMAGE" | "PDF" | "UNKNOWN" | "VIDEO"
  GlobalRole: "CUSTOMER" | "SUPERADMIN"
  MembershipRole: "OWNER" | "STITCHI_ADMIN" | "STITCHI_DESIGNER"
  NotificationChannelType: "EMAIL" | "WEB"
  OrderItemType: "BIG_COMMERCE_PRODUCT" | "CUSTOM"
  OrderPaymentStatus: "NOT_PAID" | "PAID" | "PARTIALLY_PAID" | "PARTIALLY_REFUNDED" | "REFUNDED"
  OrderType: "CART" | "CONFIRMED"
  ScopeAction: "CREATE" | "DELETE" | "READ" | "UPDATE"
  ScopeResource: "DesignProduct" | "DesignProof" | "DesignRequest" | "DesignRequestRevisionRequest" | "Integration" | "Membership" | "Order"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  CatalogBrand: { // root type
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  }
  CatalogCategory: { // root type
    bigCommerceEntityId: string; // ID!
    description?: string | null; // String
    name: string; // String!
    subcategories?: NexusGenRootTypes['CatalogCategory'] | null; // CatalogCategory
  }
  CatalogProduct: { // root type
    brandId?: string | null; // ID
    categoryIds: string[]; // [ID!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    images: NexusGenRootTypes['CatalogProductImage'][]; // [CatalogProductImage!]!
    name: string; // String!
    priceCents: number; // Int!
    primaryImage?: NexusGenRootTypes['CatalogProductImage'] | null; // CatalogProductImage
    relatedProductIds: string[]; // [ID!]!
    slug: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    visible: boolean; // Boolean!
  }
  CatalogProductImage: { // root type
    order?: number | null; // Int
    url: string; // String!
  }
  Color: { // root type
    cmykC?: number | null; // Int
    cmykK?: number | null; // Int
    cmykM?: number | null; // Int
    cmykY?: number | null; // Int
    hex: string; // String!
    id: string; // String!
    name: string; // String!
    pantone?: string | null; // String
  }
  Conversation: { // root type
    id: string; // ID!
    messages: NexusGenRootTypes['ConversationMessage'][]; // [ConversationMessage!]!
  }
  ConversationMessage: { // root type
    conversationId: string; // ID!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileIds: string[]; // [ID!]!
    id: string; // ID!
    message: string; // String!
    senderMembershipId?: string | null; // ID
    viewerIsSender: boolean; // Boolean!
  }
  DesignProduct: { // root type
    catalogProductId: string; // ID!
    colors: NexusGenRootTypes['DesignProductColor'][]; // [DesignProductColor!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    designProofId: string; // ID!
    designRequestId: string; // ID!
    id: string; // ID!
    membershipId?: string | null; // ID
    name: string; // String!
    organizationId?: string | null; // ID
    primaryImageFileId?: string | null; // ID
    termsConditionsAgreed: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  DesignProductColor: { // root type
    catalogProductColorId: string; // ID!
    designRequestProductId: string; // ID!
    hex?: string | null; // String
    id: string; // ID!
    imageFileIds: string[]; // [ID!]!
    name?: string | null; // String
  }
  DesignProductConnection: { // root type
    edges?: Array<NexusGenRootTypes['DesignProductEdge'] | null> | null; // [DesignProductEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  DesignProductCreateOrderPayload: { // root type
    order?: NexusGenRootTypes['Order'] | null; // Order
  }
  DesignProductEdge: { // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['DesignProduct'] | null; // DesignProduct
  }
  DesignProductSize: { // root type
    id: string; // ID!
    name: string; // String!
  }
  DesignProductVariant: { // root type
    catalogProductColorId?: string | null; // ID
    catalogProductId: string; // ID!
    catalogProductSizeId?: string | null; // ID
    catalogProductVariantId: string; // ID!
    id: string; // ID!
    sizeName?: string | null; // String
  }
  DesignProof: { // root type
    artistMembershipId: string; // ID!
    colors: NexusGenRootTypes['DesignProofColor'][]; // [DesignProofColor!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    designProofColorIds: string[]; // [ID!]!
    designProofLocationIds: string[]; // [ID!]!
    id: string; // ID!
    locations: NexusGenRootTypes['DesignProofLocation'][]; // [DesignProofLocation!]!
    primaryImageFileId?: string | null; // ID
  }
  DesignProofColor: { // root type
    catalogProductColorId: string; // ID!
    designProofId: string; // ID!
    hexCode?: string | null; // String
    id: string; // ID!
    imageFileIds: string[]; // [ID!]!
    name?: string | null; // String
  }
  DesignProofLocation: { // root type
    colorCount?: number | null; // Int
    designProofId: string; // ID!
    fileId: string; // ID!
    id: string; // ID!
    placement?: string | null; // String
  }
  DesignRequest: { // root type
    approvedDesignProofId?: string | null; // ID
    conversationId?: string | null; // ID
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    designProofIds: string[]; // [ID!]!
    designRequestLocationIds: string[]; // [ID!]!
    designRequestLocations: NexusGenRootTypes['DesignRequestDesignLocation'][]; // [DesignRequestDesignLocation!]!
    designRequestProduct: NexusGenRootTypes['DesignRequestProduct']; // DesignRequestProduct!
    designRequestProductId: string; // ID!
    designRevisionRequestIds: string[]; // [ID!]!
    designRevisionRequests: NexusGenRootTypes['DesignRequestRevisionRequest'][]; // [DesignRequestRevisionRequest!]!
    fileIds: string[]; // [ID!]!
    humanizedStatus: string; // String!
    id: string; // ID!
    membershipId?: string | null; // ID
    name: string; // String!
    status: NexusGenEnums['DesignRequestStatus']; // DesignRequestStatus!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    useCase?: string | null; // String
  }
  DesignRequestApprovePayload: { // root type
    design?: NexusGenRootTypes['DesignProduct'] | null; // DesignProduct
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestConnection: { // root type
    edges?: Array<NexusGenRootTypes['DesignRequestEdge'] | null> | null; // [DesignRequestEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  DesignRequestConversationMessageCreatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestCreatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestDesignLocation: { // root type
    description?: string | null; // String
    fileIds: string[]; // [ID!]!
    id: string; // ID!
    placement?: string | null; // String
  }
  DesignRequestDesignLocationCreatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
    designRequestDesignLocation?: NexusGenRootTypes['DesignRequestDesignLocation'] | null; // DesignRequestDesignLocation
  }
  DesignRequestDesignLocationDeletePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestDesignLocationUpdatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
    designRequestDesignLocation?: NexusGenRootTypes['DesignRequestDesignLocation'] | null; // DesignRequestDesignLocation
  }
  DesignRequestEdge: { // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestHistoryItemAddedPayload: { // root type
    historyItemAdded: boolean; // Boolean!
  }
  DesignRequestHistoryItemDesignRequestEvent: { // root type
    id: string; // ID!
    membershipId?: string | null; // ID
    method: NexusGenEnums['DesignRequestHistoryItemDesignRequestEventMethod']; // DesignRequestHistoryItemDesignRequestEventMethod!
    timestamp: NexusGenScalars['DateTime']; // DateTime!
  }
  DesignRequestProduct: { // root type
    catalogProductId: string; // String!
    colors: NexusGenRootTypes['DesignRequestProductColors'][]; // [DesignRequestProductColors!]!
    id: string; // ID!
  }
  DesignRequestProductColors: { // root type
    catalogProductColorId: string; // ID!
    hexCode?: string | null; // String
    name?: string | null; // String
  }
  DesignRequestProofCreatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestRevisionRequest: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    designRequestId: string; // ID!
    fileIds: string[]; // [ID!]!
    id: string; // ID!
    membershipId: string; // ID!
  }
  DesignRequestRevisionRequestCreatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestSubmitPayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestUpdatePayload: { // root type
    designRequest?: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  FileConnection: { // root type
    edges?: Array<NexusGenRootTypes['FileEdge'] | null> | null; // [FileEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FileCreateBatchPayload: { // root type
    files?: NexusGenRootTypes['File'][] | null; // [File!]
  }
  FileCreatePayload: { // root type
    file?: NexusGenRootTypes['File'] | null; // File
  }
  FileEdge: { // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['File'] | null; // File
  }
  FileImage: { // root type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    height: number; // Int!
    id: string; // ID!
    membershipId?: string | null; // String
    name: string; // String!
    organizationId?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
    width: number; // Int!
  }
  FilePdf: { // root type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    id: string; // ID!
    membershipId?: string | null; // String
    name: string; // String!
    organizationId?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
  }
  FileUnknown: { // root type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    id: string; // ID!
    membershipId?: string | null; // String
    name: string; // String!
    organizationId?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
  }
  Fulfillment: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fulfillmentOrderItems: NexusGenRootTypes['FulfillmentOrderItem'][]; // [FulfillmentOrderItem!]!
    fulfillmentTrackingInfoId: string; // String!
    id: string; // ID!
    membershipId?: string | null; // String
    orderId: string; // String!
    organizationId?: string | null; // String
    trackingInfo: NexusGenRootTypes['FulfillmentTrackingInfo']; // FulfillmentTrackingInfo!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FulfillmentCreatePayload: { // root type
    fulfillment?: NexusGenRootTypes['Fulfillment'] | null; // Fulfillment
  }
  FulfillmentOrderItem: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fulfillmentId: string; // String!
    id: string; // ID!
    orderItemId: string; // String!
    quantity: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FulfillmentTrackingInfo: { // root type
    carrier: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    trackingNumber: string; // String!
    trackingUrl: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  MailingAddress: { // root type
    address1?: string | null; // String
    address2?: string | null; // String
    city?: string | null; // String
    company?: string | null; // String
    country?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    firstName?: string | null; // String
    id: string; // ID!
    lastName?: string | null; // String
    latitude?: number | null; // Float
    longitude?: number | null; // Float
    membershipId?: string | null; // String
    name?: string | null; // String
    organizationId?: string | null; // String
    phone?: string | null; // String
    province?: string | null; // String
    provinceCode?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    zip?: string | null; // String
  }
  MailingAddressCreatePayload: { // root type
    mailingAddress?: NexusGenRootTypes['MailingAddress'] | null; // MailingAddress
  }
  Membership: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    invitedEmail?: string | null; // String
    organizationId: string; // String!
    role?: NexusGenEnums['MembershipRole'] | null; // MembershipRole
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId?: string | null; // String
  }
  MembershipFlags: { // root type
    isBetaTester: boolean; // Boolean!
  }
  MembershipInvite: { // root type
    id: string; // ID!
    invitedEmail?: string | null; // String
    membershipId: string; // ID!
    organizationId: string; // ID!
    organizationName?: string | null; // String
  }
  MembershipInviteAcceptPayload: { // root type
    membership: NexusGenRootTypes['Membership']; // Membership!
  }
  MembershipInvitePayload: { // root type
    memberships: NexusGenRootTypes['Membership'][]; // [Membership!]!
  }
  MembershipInviteResendPayload: { // root type
    membership: NexusGenRootTypes['Membership']; // Membership!
  }
  MembershipInviteRevokePayload: { // root type
    membership: NexusGenRootTypes['Membership']; // Membership!
  }
  Mutation: {};
  Notification: { // root type
    channels: Array<NexusGenRootTypes['NotificationChannel'] | null>; // [NotificationChannel]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    membershipId?: string | null; // String
    notificationTopicId?: string | null; // String
    notificationWorkflowId: string; // String!
    organizationId?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  NotificationChannelEmail: { // root type
    channelType: NexusGenEnums['NotificationChannelType']; // NotificationChannelType!
    htmlBody: string; // String!
    id: string; // ID!
    recipientEmail: string; // String!
    recipientName?: string | null; // String
    subject: string; // String!
    textBody?: string | null; // String
  }
  NotificationChannelWeb: { // root type
    channelType: NexusGenEnums['NotificationChannelType']; // NotificationChannelType!
    ctaText?: string | null; // String
    ctaUrl?: string | null; // String
    id: string; // ID!
    message: string; // String!
  }
  NotificationConnection: { // root type
    edges?: Array<NexusGenRootTypes['NotificationEdge'] | null> | null; // [NotificationEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  NotificationEdge: { // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['Notification'] | null; // Notification
  }
  Order: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    customerEmail?: string | null; // String
    customerFirstName?: string | null; // String
    customerLastName?: string | null; // String
    customerPhone?: string | null; // String
    humanOrderId: string; // String!
    humanPaymentStatus: string; // String!
    id: string; // ID!
    items: NexusGenRootTypes['OrderItem'][]; // [OrderItem!]!
    membershipId?: string | null; // String
    paymentStatus: NexusGenEnums['OrderPaymentStatus']; // OrderPaymentStatus!
    shippingAddressId?: string | null; // String
    subtotalPriceCents: number; // Int!
    totalAmountDueCents: number; // Int!
    totalAmountPaidCents: number; // Int!
    totalAmountRefundedCents: number; // Int!
    totalPriceCents: number; // Int!
    totalProcessingFeeCents: number; // Int!
    totalShippingCents: number; // Int!
    totalTaxCents: number; // Int!
    type: NexusGenEnums['OrderType']; // OrderType!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OrderConfirmPayload: { // root type
    order?: NexusGenRootTypes['Order'] | null; // Order
  }
  OrderConnection: { // root type
    edges?: Array<NexusGenRootTypes['OrderEdge'] | null> | null; // [OrderEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  OrderEdge: { // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['Order'] | null; // Order
  }
  OrderItem: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    orderId: string; // String!
    productId?: string | null; // String
    productVariantId?: string | null; // String
    quantity: number; // Int!
    title: string; // String!
    totalPriceCents: number; // Int!
    type: NexusGenEnums['OrderItemType']; // OrderItemType!
    unitPriceCents: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OrderItemSummary: { // root type
    id: string; // ID!
    quantity: number; // Int!
    title: string; // String!
    totalPriceCents: number; // Int!
  }
  Organization: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    name?: string | null; // String
    role?: NexusGenEnums['GlobalRole'] | null; // GlobalRole
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  OrganizationBrand: { // root type
    id: string; // ID!
    organizationId: string; // ID!
  }
  OrganizationBrandColorCreatePayload: { // root type
    brand?: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    color: NexusGenRootTypes['Color']; // Color!
  }
  OrganizationBrandColorDeletePayload: { // root type
    brand?: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    color: NexusGenRootTypes['Color']; // Color!
  }
  OrganizationBrandColorUpdatePayload: { // root type
    brand?: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    color: NexusGenRootTypes['Color']; // Color!
  }
  OrganizationBrandFileCreateBatchPayload: { // root type
    brand?: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    files: NexusGenRootTypes['File'][]; // [File!]!
  }
  OrganizationBrandFileDeleteBatchPayload: { // root type
    brand?: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    files: NexusGenRootTypes['File'][]; // [File!]!
  }
  OrganizationUpdatePayload: { // root type
    organization?: NexusGenRootTypes['Organization'] | null; // Organization
  }
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  PaymentIntent: { // root type
    amount: number; // Int!
    clientSecret?: string | null; // String
    id: string; // String!
  }
  PaymentIntentCreatePayload: { // root type
    paymentIntent?: NexusGenRootTypes['PaymentIntent'] | null; // PaymentIntent
  }
  PaymentMethod: { // root type
    billingDetails?: NexusGenRootTypes['PaymentMethodBillingDetails'] | null; // PaymentMethodBillingDetails
    card?: NexusGenRootTypes['PaymentMethodCard'] | null; // PaymentMethodCard
    id: string; // String!
    type: string; // String!
  }
  PaymentMethodBillingDetails: { // root type
    city?: string | null; // String
    country?: string | null; // String
    email?: string | null; // String
    line1?: string | null; // String
    line2?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
    postalCode?: string | null; // String
    state?: string | null; // String
  }
  PaymentMethodCard: { // root type
    brand?: string | null; // String
    expMonth?: number | null; // Int
    expYear?: number | null; // Int
    last4?: string | null; // String
  }
  PrintLocation: { // root type
    colorCount: number; // Int!
    totalCostInCents?: number | null; // Int
  }
  Product: { // root type
    id: string; // ID!
  }
  Query: {};
  Quote: { // root type
    id: string; // ID!
    printLocationCount: number; // Int!
    printLocations: NexusGenRootTypes['PrintLocation'][]; // [PrintLocation!]!
    productTotalCostCents: number; // Int!
    productUnitCostCents: number; // Int!
  }
  Scope: { // root type
    action: NexusGenEnums['ScopeAction']; // ScopeAction!
    resource: NexusGenEnums['ScopeResource']; // ScopeResource!
  }
  Subscriber: { // root type
    email: string; // String!
    id: string; // String!
  }
  SubscriberCreatePayload: { // root type
    subscriber?: NexusGenRootTypes['Subscriber'] | null; // Subscriber
  }
  Subscription: {};
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    emailVerified?: boolean | null; // Boolean
    familyName?: string | null; // String
    givenName?: string | null; // String
    id: string; // ID!
    lastLogin?: NexusGenScalars['DateTime'] | null; // DateTime
    loginsCount?: number | null; // Int
    name?: string | null; // String
    nickname?: string | null; // String
    phoneNumber?: string | null; // String
    phoneVerified?: boolean | null; // Boolean
    picture?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    username?: string | null; // String
  }
  UserOrganizationCreatePayload: { // root type
    membership?: NexusGenRootTypes['Membership'] | null; // Membership
    organization?: NexusGenRootTypes['Organization'] | null; // Organization
  }
  UserSetOrganizationPayload: { // root type
    membershipId?: string | null; // String
    organizationId?: string | null; // String
  }
}

export interface NexusGenInterfaces {
  File: NexusGenRootTypes['FileImage'] | NexusGenRootTypes['FilePdf'] | NexusGenRootTypes['FileUnknown'];
  NotificationChannel: NexusGenRootTypes['NotificationChannelEmail'] | NexusGenRootTypes['NotificationChannelWeb'];
}

export interface NexusGenUnions {
  DesignRequestHistoryItem: NexusGenRootTypes['ConversationMessage'] | NexusGenRootTypes['DesignProof'] | NexusGenRootTypes['DesignRequestHistoryItemDesignRequestEvent'] | NexusGenRootTypes['DesignRequestRevisionRequest'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CatalogBrand: { // field return type
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
  }
  CatalogCategory: { // field return type
    bigCommerceEntityId: string; // ID!
    description: string | null; // String
    name: string; // String!
    subcategories: NexusGenRootTypes['CatalogCategory'] | null; // CatalogCategory
  }
  CatalogProduct: { // field return type
    brand: NexusGenRootTypes['CatalogBrand'] | null; // CatalogBrand
    brandId: string | null; // ID
    categoryIds: string[]; // [ID!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    images: NexusGenRootTypes['CatalogProductImage'][]; // [CatalogProductImage!]!
    name: string; // String!
    priceCents: number; // Int!
    primaryImage: NexusGenRootTypes['CatalogProductImage'] | null; // CatalogProductImage
    relatedProductIds: string[]; // [ID!]!
    slug: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    visible: boolean; // Boolean!
  }
  CatalogProductImage: { // field return type
    order: number | null; // Int
    url: string; // String!
  }
  Color: { // field return type
    cmykC: number | null; // Int
    cmykK: number | null; // Int
    cmykM: number | null; // Int
    cmykY: number | null; // Int
    hex: string; // String!
    id: string; // String!
    name: string; // String!
    pantone: string | null; // String
  }
  Conversation: { // field return type
    id: string; // ID!
    messages: NexusGenRootTypes['ConversationMessage'][]; // [ConversationMessage!]!
  }
  ConversationMessage: { // field return type
    conversationId: string; // ID!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileIds: string[]; // [ID!]!
    files: NexusGenRootTypes['File'][]; // [File!]!
    id: string; // ID!
    message: string; // String!
    sender: NexusGenRootTypes['Membership'] | null; // Membership
    senderMembershipId: string | null; // ID
    viewerIsSender: boolean; // Boolean!
  }
  DesignProduct: { // field return type
    catalogProductId: string; // ID!
    colors: NexusGenRootTypes['DesignProductColor'][]; // [DesignProductColor!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    designProofId: string; // ID!
    designRequestId: string; // ID!
    id: string; // ID!
    membershipId: string | null; // ID
    minUnitPriceCents: number | null; // Int
    name: string; // String!
    organizationId: string | null; // ID
    primaryImageFile: NexusGenRootTypes['FileImage'] | null; // FileImage
    primaryImageFileId: string | null; // ID
    quote: NexusGenRootTypes['Quote'] | null; // Quote
    sizes: NexusGenRootTypes['DesignProductSize'][] | null; // [DesignProductSize!]
    termsConditionsAgreed: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    variants: NexusGenRootTypes['DesignProductVariant'][]; // [DesignProductVariant!]!
  }
  DesignProductColor: { // field return type
    catalogProductColorId: string; // ID!
    designRequestProductId: string; // ID!
    hex: string | null; // String
    id: string; // ID!
    imageFileIds: string[]; // [ID!]!
    images: NexusGenRootTypes['FileImage'][]; // [FileImage!]!
    name: string | null; // String
  }
  DesignProductConnection: { // field return type
    edges: Array<NexusGenRootTypes['DesignProductEdge'] | null> | null; // [DesignProductEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  DesignProductCreateOrderPayload: { // field return type
    order: NexusGenRootTypes['Order'] | null; // Order
  }
  DesignProductEdge: { // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['DesignProduct'] | null; // DesignProduct
  }
  DesignProductSize: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  DesignProductVariant: { // field return type
    catalogProductColorId: string | null; // ID
    catalogProductId: string; // ID!
    catalogProductSizeId: string | null; // ID
    catalogProductVariantId: string; // ID!
    id: string; // ID!
    sizeName: string | null; // String
  }
  DesignProof: { // field return type
    artist: NexusGenRootTypes['Membership'] | null; // Membership
    artistMembershipId: string; // ID!
    colors: NexusGenRootTypes['DesignProofColor'][]; // [DesignProofColor!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    designProofColorIds: string[]; // [ID!]!
    designProofLocationIds: string[]; // [ID!]!
    id: string; // ID!
    locations: NexusGenRootTypes['DesignProofLocation'][]; // [DesignProofLocation!]!
    membership: NexusGenRootTypes['Membership'] | null; // Membership
    primaryImageFile: NexusGenRootTypes['FileImage'] | null; // FileImage
    primaryImageFileId: string | null; // ID
  }
  DesignProofColor: { // field return type
    catalogProductColorId: string; // ID!
    designProofId: string; // ID!
    hexCode: string | null; // String
    id: string; // ID!
    imageFileIds: string[]; // [ID!]!
    images: NexusGenRootTypes['FileImage'][]; // [FileImage!]!
    name: string | null; // String
  }
  DesignProofLocation: { // field return type
    colorCount: number | null; // Int
    designProofId: string; // ID!
    file: NexusGenRootTypes['File'] | null; // File
    fileId: string; // ID!
    id: string; // ID!
    placement: string | null; // String
  }
  DesignRequest: { // field return type
    approvedDesignProofId: string | null; // ID
    approvedProof: NexusGenRootTypes['DesignProof'] | null; // DesignProof
    conversationId: string | null; // ID
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    designProducts: NexusGenRootTypes['DesignProduct'][]; // [DesignProduct!]!
    designProofIds: string[]; // [ID!]!
    designRequestLocationIds: string[]; // [ID!]!
    designRequestLocations: NexusGenRootTypes['DesignRequestDesignLocation'][]; // [DesignRequestDesignLocation!]!
    designRequestProduct: NexusGenRootTypes['DesignRequestProduct']; // DesignRequestProduct!
    designRequestProductId: string; // ID!
    designRevisionRequestIds: string[]; // [ID!]!
    designRevisionRequests: NexusGenRootTypes['DesignRequestRevisionRequest'][]; // [DesignRequestRevisionRequest!]!
    fileIds: string[]; // [ID!]!
    fileUploadDirectory: string; // String!
    files: NexusGenRootTypes['File'][]; // [File!]!
    history: NexusGenRootTypes['DesignRequestHistoryItem'][]; // [DesignRequestHistoryItem!]!
    humanizedStatus: string; // String!
    id: string; // ID!
    membership: NexusGenRootTypes['Membership'] | null; // Membership
    membershipId: string | null; // ID
    name: string; // String!
    previewImage: NexusGenRootTypes['FileImage'] | null; // FileImage
    proofs: NexusGenRootTypes['DesignProof'][]; // [DesignProof!]!
    status: NexusGenEnums['DesignRequestStatus']; // DesignRequestStatus!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    useCase: string | null; // String
  }
  DesignRequestApprovePayload: { // field return type
    design: NexusGenRootTypes['DesignProduct'] | null; // DesignProduct
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestConnection: { // field return type
    edges: Array<NexusGenRootTypes['DesignRequestEdge'] | null> | null; // [DesignRequestEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  DesignRequestConversationMessageCreatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestCreatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestDesignLocation: { // field return type
    description: string | null; // String
    fileIds: string[]; // [ID!]!
    fileUploadDirectory: string; // String!
    files: NexusGenRootTypes['File'][]; // [File!]!
    id: string; // ID!
    placement: string | null; // String
  }
  DesignRequestDesignLocationCreatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
    designRequestDesignLocation: NexusGenRootTypes['DesignRequestDesignLocation'] | null; // DesignRequestDesignLocation
  }
  DesignRequestDesignLocationDeletePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestDesignLocationUpdatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
    designRequestDesignLocation: NexusGenRootTypes['DesignRequestDesignLocation'] | null; // DesignRequestDesignLocation
  }
  DesignRequestEdge: { // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestHistoryItemAddedPayload: { // field return type
    historyItemAdded: boolean; // Boolean!
  }
  DesignRequestHistoryItemDesignRequestEvent: { // field return type
    actor: NexusGenRootTypes['Membership'] | null; // Membership
    id: string; // ID!
    membershipId: string | null; // ID
    method: NexusGenEnums['DesignRequestHistoryItemDesignRequestEventMethod']; // DesignRequestHistoryItemDesignRequestEventMethod!
    timestamp: NexusGenScalars['DateTime']; // DateTime!
  }
  DesignRequestProduct: { // field return type
    catalogProduct: NexusGenRootTypes['CatalogProduct'] | null; // CatalogProduct
    catalogProductId: string; // String!
    colors: NexusGenRootTypes['DesignRequestProductColors'][]; // [DesignRequestProductColors!]!
    id: string; // ID!
  }
  DesignRequestProductColors: { // field return type
    catalogProductColorId: string; // ID!
    hexCode: string | null; // String
    name: string | null; // String
  }
  DesignRequestProofCreatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestRevisionRequest: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    designRequestId: string; // ID!
    fileIds: string[]; // [ID!]!
    files: NexusGenRootTypes['File'][]; // [File!]!
    id: string; // ID!
    membership: NexusGenRootTypes['Membership'] | null; // Membership
    membershipId: string; // ID!
  }
  DesignRequestRevisionRequestCreatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestSubmitPayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  DesignRequestUpdatePayload: { // field return type
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
  }
  FileConnection: { // field return type
    edges: Array<NexusGenRootTypes['FileEdge'] | null> | null; // [FileEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FileCreateBatchPayload: { // field return type
    files: NexusGenRootTypes['File'][] | null; // [File!]
  }
  FileCreatePayload: { // field return type
    file: NexusGenRootTypes['File'] | null; // File
  }
  FileEdge: { // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['File'] | null; // File
  }
  FileImage: { // field return type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    height: number; // Int!
    humanizedBytes: string; // String!
    id: string; // ID!
    membershipId: string | null; // String
    name: string; // String!
    organizationId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
    width: number; // Int!
  }
  FilePdf: { // field return type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    humanizedBytes: string; // String!
    id: string; // ID!
    membershipId: string | null; // String
    name: string; // String!
    organizationId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
  }
  FileUnknown: { // field return type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    humanizedBytes: string; // String!
    id: string; // ID!
    membershipId: string | null; // String
    name: string; // String!
    organizationId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
  }
  Fulfillment: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fulfillmentOrderItems: NexusGenRootTypes['FulfillmentOrderItem'][]; // [FulfillmentOrderItem!]!
    fulfillmentTrackingInfoId: string; // String!
    id: string; // ID!
    membershipId: string | null; // String
    orderId: string; // String!
    organizationId: string | null; // String
    trackingInfo: NexusGenRootTypes['FulfillmentTrackingInfo']; // FulfillmentTrackingInfo!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FulfillmentCreatePayload: { // field return type
    fulfillment: NexusGenRootTypes['Fulfillment'] | null; // Fulfillment
  }
  FulfillmentOrderItem: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fulfillmentId: string; // String!
    id: string; // ID!
    orderItemId: string; // String!
    quantity: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FulfillmentTrackingInfo: { // field return type
    carrier: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    trackingNumber: string; // String!
    trackingUrl: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  MailingAddress: { // field return type
    address1: string | null; // String
    address2: string | null; // String
    city: string | null; // String
    company: string | null; // String
    country: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    firstName: string | null; // String
    id: string; // ID!
    lastName: string | null; // String
    latitude: number | null; // Float
    longitude: number | null; // Float
    membershipId: string | null; // String
    name: string | null; // String
    organizationId: string | null; // String
    phone: string | null; // String
    province: string | null; // String
    provinceCode: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    zip: string | null; // String
  }
  MailingAddressCreatePayload: { // field return type
    mailingAddress: NexusGenRootTypes['MailingAddress'] | null; // MailingAddress
  }
  Membership: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    designProducts: NexusGenRootTypes['DesignProductConnection']; // DesignProductConnection!
    designRequests: NexusGenRootTypes['DesignRequestConnection']; // DesignRequestConnection!
    flags: NexusGenRootTypes['MembershipFlags']; // MembershipFlags!
    hasDesignProducts: boolean; // Boolean!
    hasDesignRequests: boolean; // Boolean!
    hasOrders: boolean; // Boolean!
    humanizedRole: string | null; // String
    id: string; // ID!
    invitedEmail: string | null; // String
    notifications: NexusGenRootTypes['NotificationConnection'] | null; // NotificationConnection
    orders: NexusGenRootTypes['OrderConnection'] | null; // OrderConnection
    organization: NexusGenRootTypes['Organization']; // Organization!
    organizationId: string; // String!
    role: NexusGenEnums['MembershipRole'] | null; // MembershipRole
    scopes: NexusGenRootTypes['Scope'][]; // [Scope!]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  MembershipFlags: { // field return type
    isBetaTester: boolean; // Boolean!
  }
  MembershipInvite: { // field return type
    id: string; // ID!
    invitedEmail: string | null; // String
    membershipId: string; // ID!
    organizationId: string; // ID!
    organizationName: string | null; // String
  }
  MembershipInviteAcceptPayload: { // field return type
    membership: NexusGenRootTypes['Membership']; // Membership!
  }
  MembershipInvitePayload: { // field return type
    memberships: NexusGenRootTypes['Membership'][]; // [Membership!]!
  }
  MembershipInviteResendPayload: { // field return type
    membership: NexusGenRootTypes['Membership']; // Membership!
  }
  MembershipInviteRevokePayload: { // field return type
    membership: NexusGenRootTypes['Membership']; // Membership!
  }
  Mutation: { // field return type
    designProductCreateOrder: NexusGenRootTypes['DesignProductCreateOrderPayload'] | null; // DesignProductCreateOrderPayload
    designRequestApprove: NexusGenRootTypes['DesignRequestApprovePayload'] | null; // DesignRequestApprovePayload
    designRequestConversationMessageCreate: NexusGenRootTypes['DesignRequestConversationMessageCreatePayload'] | null; // DesignRequestConversationMessageCreatePayload
    designRequestCreate: NexusGenRootTypes['DesignRequestCreatePayload'] | null; // DesignRequestCreatePayload
    designRequestDesignLocationCreate: NexusGenRootTypes['DesignRequestDesignLocationCreatePayload'] | null; // DesignRequestDesignLocationCreatePayload
    designRequestDesignLocationDelete: NexusGenRootTypes['DesignRequestDesignLocationDeletePayload'] | null; // DesignRequestDesignLocationDeletePayload
    designRequestDesignLocationUpdate: NexusGenRootTypes['DesignRequestDesignLocationUpdatePayload'] | null; // DesignRequestDesignLocationUpdatePayload
    designRequestProofCreate: NexusGenRootTypes['DesignRequestProofCreatePayload'] | null; // DesignRequestProofCreatePayload
    designRequestRevisionRequestCreate: NexusGenRootTypes['DesignRequestRevisionRequestCreatePayload'] | null; // DesignRequestRevisionRequestCreatePayload
    designRequestSubmit: NexusGenRootTypes['DesignRequestSubmitPayload'] | null; // DesignRequestSubmitPayload
    designRequestUpdate: NexusGenRootTypes['DesignRequestUpdatePayload'] | null; // DesignRequestUpdatePayload
    fileCreate: NexusGenRootTypes['FileCreatePayload'] | null; // FileCreatePayload
    fileCreateBatch: NexusGenRootTypes['FileCreateBatchPayload'] | null; // FileCreateBatchPayload
    fulfillmentCreate: NexusGenRootTypes['FulfillmentCreatePayload'] | null; // FulfillmentCreatePayload
    mailingAddressCreate: NexusGenRootTypes['MailingAddressCreatePayload'] | null; // MailingAddressCreatePayload
    membershipInvite: NexusGenRootTypes['MembershipInvitePayload'] | null; // MembershipInvitePayload
    membershipInviteAccept: NexusGenRootTypes['MembershipInviteAcceptPayload'] | null; // MembershipInviteAcceptPayload
    membershipInviteResend: NexusGenRootTypes['MembershipInviteResendPayload'] | null; // MembershipInviteResendPayload
    membershipInviteRevoke: NexusGenRootTypes['MembershipInviteRevokePayload'] | null; // MembershipInviteRevokePayload
    orderConfirm: NexusGenRootTypes['OrderConfirmPayload'] | null; // OrderConfirmPayload
    organizationBrandColorCreate: NexusGenRootTypes['OrganizationBrandColorCreatePayload'] | null; // OrganizationBrandColorCreatePayload
    organizationBrandColorDelete: NexusGenRootTypes['OrganizationBrandColorDeletePayload'] | null; // OrganizationBrandColorDeletePayload
    organizationBrandColorUpdate: NexusGenRootTypes['OrganizationBrandColorUpdatePayload'] | null; // OrganizationBrandColorUpdatePayload
    organizationBrandFileCreateBatch: NexusGenRootTypes['OrganizationBrandFileCreateBatchPayload'] | null; // OrganizationBrandFileCreateBatchPayload
    organizationBrandFileDeleteBatch: NexusGenRootTypes['OrganizationBrandFileDeleteBatchPayload'] | null; // OrganizationBrandFileDeleteBatchPayload
    organizationUpdate: NexusGenRootTypes['OrganizationUpdatePayload'] | null; // OrganizationUpdatePayload
    paymentIntentCreate: NexusGenRootTypes['PaymentIntentCreatePayload'] | null; // PaymentIntentCreatePayload
    subscriberCreate: NexusGenRootTypes['SubscriberCreatePayload'] | null; // SubscriberCreatePayload
    userBoostrap: NexusGenRootTypes['User'] | null; // User
    userOrganizationCreate: NexusGenRootTypes['UserOrganizationCreatePayload'] | null; // UserOrganizationCreatePayload
    userSetOrganization: NexusGenRootTypes['UserSetOrganizationPayload'] | null; // UserSetOrganizationPayload
  }
  Notification: { // field return type
    channels: Array<NexusGenRootTypes['NotificationChannel'] | null>; // [NotificationChannel]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    membershipId: string | null; // String
    notificationTopicId: string | null; // String
    notificationWorkflowId: string; // String!
    organizationId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  NotificationChannelEmail: { // field return type
    channelType: NexusGenEnums['NotificationChannelType']; // NotificationChannelType!
    htmlBody: string; // String!
    id: string; // ID!
    recipientEmail: string; // String!
    recipientName: string | null; // String
    subject: string; // String!
    textBody: string | null; // String
  }
  NotificationChannelWeb: { // field return type
    channelType: NexusGenEnums['NotificationChannelType']; // NotificationChannelType!
    ctaText: string | null; // String
    ctaUrl: string | null; // String
    id: string; // ID!
    message: string; // String!
  }
  NotificationConnection: { // field return type
    edges: Array<NexusGenRootTypes['NotificationEdge'] | null> | null; // [NotificationEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  NotificationEdge: { // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['Notification'] | null; // Notification
  }
  Order: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    customerEmail: string | null; // String
    customerFirstName: string | null; // String
    customerId: string | null; // String
    customerLastName: string | null; // String
    customerPhone: string | null; // String
    fulfillments: NexusGenRootTypes['Fulfillment'][]; // [Fulfillment!]!
    humanOrderId: string; // String!
    humanPaymentStatus: string; // String!
    id: string; // ID!
    itemSummaries: NexusGenRootTypes['OrderItemSummary'][]; // [OrderItemSummary!]!
    items: NexusGenRootTypes['OrderItem'][]; // [OrderItem!]!
    lastPaymentMethod: NexusGenRootTypes['PaymentMethod'] | null; // PaymentMethod
    membershipId: string | null; // String
    owner: NexusGenRootTypes['Membership'] | null; // Membership
    paymentIntents: NexusGenRootTypes['PaymentIntent'][]; // [PaymentIntent!]!
    paymentStatus: NexusGenEnums['OrderPaymentStatus']; // OrderPaymentStatus!
    shippingAddress: NexusGenRootTypes['MailingAddress'] | null; // MailingAddress
    shippingAddressId: string | null; // String
    subtotalPriceCents: number; // Int!
    totalAmountDueCents: number; // Int!
    totalAmountPaidCents: number; // Int!
    totalAmountRefundedCents: number; // Int!
    totalPriceCents: number; // Int!
    totalProcessingFeeCents: number; // Int!
    totalShippingCents: number; // Int!
    totalTaxCents: number; // Int!
    type: NexusGenEnums['OrderType']; // OrderType!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OrderConfirmPayload: { // field return type
    order: NexusGenRootTypes['Order'] | null; // Order
  }
  OrderConnection: { // field return type
    edges: Array<NexusGenRootTypes['OrderEdge'] | null> | null; // [OrderEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  OrderEdge: { // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['Order'] | null; // Order
  }
  OrderItem: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    orderId: string; // String!
    productId: string | null; // String
    productVariantId: string | null; // String
    quantity: number; // Int!
    title: string; // String!
    totalPriceCents: number; // Int!
    type: NexusGenEnums['OrderItemType']; // OrderItemType!
    unitPriceCents: number; // Int!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OrderItemSummary: { // field return type
    id: string; // ID!
    quantity: number; // Int!
    title: string; // String!
    totalPriceCents: number; // Int!
  }
  Organization: { // field return type
    brand: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    memberships: NexusGenRootTypes['Membership'][]; // [Membership!]!
    name: string | null; // String
    role: NexusGenEnums['GlobalRole'] | null; // GlobalRole
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  OrganizationBrand: { // field return type
    colors: NexusGenRootTypes['Color'][]; // [Color!]!
    fileUploadDirectory: string; // String!
    files: NexusGenRootTypes['FileConnection']; // FileConnection!
    id: string; // ID!
    organizationId: string; // ID!
  }
  OrganizationBrandColorCreatePayload: { // field return type
    brand: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    color: NexusGenRootTypes['Color']; // Color!
  }
  OrganizationBrandColorDeletePayload: { // field return type
    brand: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    color: NexusGenRootTypes['Color']; // Color!
  }
  OrganizationBrandColorUpdatePayload: { // field return type
    brand: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    color: NexusGenRootTypes['Color']; // Color!
  }
  OrganizationBrandFileCreateBatchPayload: { // field return type
    brand: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    files: NexusGenRootTypes['File'][]; // [File!]!
  }
  OrganizationBrandFileDeleteBatchPayload: { // field return type
    brand: NexusGenRootTypes['OrganizationBrand'] | null; // OrganizationBrand
    files: NexusGenRootTypes['File'][]; // [File!]!
  }
  OrganizationUpdatePayload: { // field return type
    organization: NexusGenRootTypes['Organization'] | null; // Organization
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  PaymentIntent: { // field return type
    amount: number; // Int!
    clientSecret: string | null; // String
    id: string; // String!
  }
  PaymentIntentCreatePayload: { // field return type
    paymentIntent: NexusGenRootTypes['PaymentIntent'] | null; // PaymentIntent
  }
  PaymentMethod: { // field return type
    billingDetails: NexusGenRootTypes['PaymentMethodBillingDetails'] | null; // PaymentMethodBillingDetails
    card: NexusGenRootTypes['PaymentMethodCard'] | null; // PaymentMethodCard
    id: string; // String!
    type: string; // String!
  }
  PaymentMethodBillingDetails: { // field return type
    city: string | null; // String
    country: string | null; // String
    email: string | null; // String
    line1: string | null; // String
    line2: string | null; // String
    name: string | null; // String
    phone: string | null; // String
    postalCode: string | null; // String
    state: string | null; // String
  }
  PaymentMethodCard: { // field return type
    brand: string | null; // String
    expMonth: number | null; // Int
    expYear: number | null; // Int
    last4: string | null; // String
  }
  PrintLocation: { // field return type
    colorCount: number; // Int!
    totalCostInCents: number | null; // Int
  }
  Product: { // field return type
    id: string; // ID!
    priceCents: number; // Int!
    quote: NexusGenRootTypes['Quote']; // Quote!
  }
  Query: { // field return type
    _products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    designProduct: NexusGenRootTypes['DesignProduct'] | null; // DesignProduct
    designProof: NexusGenRootTypes['DesignProof'] | null; // DesignProof
    designRequest: NexusGenRootTypes['DesignRequest'] | null; // DesignRequest
    membershipInvite: NexusGenRootTypes['MembershipInvite']; // MembershipInvite!
    order: NexusGenRootTypes['Order'] | null; // Order
    userMemberships: NexusGenRootTypes['Membership'][]; // [Membership!]!
    viewer: NexusGenRootTypes['Membership'] | null; // Membership
  }
  Quote: { // field return type
    id: string; // ID!
    printLocationCount: number; // Int!
    printLocations: NexusGenRootTypes['PrintLocation'][]; // [PrintLocation!]!
    productTotalCostCents: number; // Int!
    productUnitCostCents: number; // Int!
  }
  Scope: { // field return type
    action: NexusGenEnums['ScopeAction']; // ScopeAction!
    resource: NexusGenEnums['ScopeResource']; // ScopeResource!
  }
  Subscriber: { // field return type
    email: string; // String!
    id: string; // String!
  }
  SubscriberCreatePayload: { // field return type
    subscriber: NexusGenRootTypes['Subscriber'] | null; // Subscriber
  }
  Subscription: { // field return type
    designRequestHistoryItemAdded: NexusGenRootTypes['DesignRequestHistoryItemAddedPayload'] | null; // DesignRequestHistoryItemAddedPayload
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    emailVerified: boolean | null; // Boolean
    familyName: string | null; // String
    givenName: string | null; // String
    id: string; // ID!
    lastLogin: NexusGenScalars['DateTime'] | null; // DateTime
    loginsCount: number | null; // Int
    name: string | null; // String
    nickname: string | null; // String
    organizations: NexusGenRootTypes['Organization'][]; // [Organization!]!
    phoneNumber: string | null; // String
    phoneVerified: boolean | null; // Boolean
    picture: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    username: string | null; // String
  }
  UserOrganizationCreatePayload: { // field return type
    membership: NexusGenRootTypes['Membership'] | null; // Membership
    organization: NexusGenRootTypes['Organization'] | null; // Organization
  }
  UserSetOrganizationPayload: { // field return type
    membershipId: string | null; // String
    organizationId: string | null; // String
  }
  File: { // field return type
    bytes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fileType: NexusGenEnums['FileType']; // FileType!
    format: string; // String!
    humanizedBytes: string; // String!
    id: string; // ID!
    membershipId: string | null; // String
    name: string; // String!
    organizationId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    url: string; // String!
  }
  NotificationChannel: { // field return type
    channelType: NexusGenEnums['NotificationChannelType']; // NotificationChannelType!
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  CatalogBrand: { // field return type name
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  CatalogCategory: { // field return type name
    bigCommerceEntityId: 'ID'
    description: 'String'
    name: 'String'
    subcategories: 'CatalogCategory'
  }
  CatalogProduct: { // field return type name
    brand: 'CatalogBrand'
    brandId: 'ID'
    categoryIds: 'ID'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    images: 'CatalogProductImage'
    name: 'String'
    priceCents: 'Int'
    primaryImage: 'CatalogProductImage'
    relatedProductIds: 'ID'
    slug: 'String'
    updatedAt: 'DateTime'
    visible: 'Boolean'
  }
  CatalogProductImage: { // field return type name
    order: 'Int'
    url: 'String'
  }
  Color: { // field return type name
    cmykC: 'Int'
    cmykK: 'Int'
    cmykM: 'Int'
    cmykY: 'Int'
    hex: 'String'
    id: 'String'
    name: 'String'
    pantone: 'String'
  }
  Conversation: { // field return type name
    id: 'ID'
    messages: 'ConversationMessage'
  }
  ConversationMessage: { // field return type name
    conversationId: 'ID'
    createdAt: 'DateTime'
    fileIds: 'ID'
    files: 'File'
    id: 'ID'
    message: 'String'
    sender: 'Membership'
    senderMembershipId: 'ID'
    viewerIsSender: 'Boolean'
  }
  DesignProduct: { // field return type name
    catalogProductId: 'ID'
    colors: 'DesignProductColor'
    createdAt: 'DateTime'
    description: 'String'
    designProofId: 'ID'
    designRequestId: 'ID'
    id: 'ID'
    membershipId: 'ID'
    minUnitPriceCents: 'Int'
    name: 'String'
    organizationId: 'ID'
    primaryImageFile: 'FileImage'
    primaryImageFileId: 'ID'
    quote: 'Quote'
    sizes: 'DesignProductSize'
    termsConditionsAgreed: 'Boolean'
    updatedAt: 'DateTime'
    variants: 'DesignProductVariant'
  }
  DesignProductColor: { // field return type name
    catalogProductColorId: 'ID'
    designRequestProductId: 'ID'
    hex: 'String'
    id: 'ID'
    imageFileIds: 'ID'
    images: 'FileImage'
    name: 'String'
  }
  DesignProductConnection: { // field return type name
    edges: 'DesignProductEdge'
    pageInfo: 'PageInfo'
  }
  DesignProductCreateOrderPayload: { // field return type name
    order: 'Order'
  }
  DesignProductEdge: { // field return type name
    cursor: 'String'
    node: 'DesignProduct'
  }
  DesignProductSize: { // field return type name
    id: 'ID'
    name: 'String'
  }
  DesignProductVariant: { // field return type name
    catalogProductColorId: 'ID'
    catalogProductId: 'ID'
    catalogProductSizeId: 'ID'
    catalogProductVariantId: 'ID'
    id: 'ID'
    sizeName: 'String'
  }
  DesignProof: { // field return type name
    artist: 'Membership'
    artistMembershipId: 'ID'
    colors: 'DesignProofColor'
    createdAt: 'DateTime'
    designProofColorIds: 'ID'
    designProofLocationIds: 'ID'
    id: 'ID'
    locations: 'DesignProofLocation'
    membership: 'Membership'
    primaryImageFile: 'FileImage'
    primaryImageFileId: 'ID'
  }
  DesignProofColor: { // field return type name
    catalogProductColorId: 'ID'
    designProofId: 'ID'
    hexCode: 'String'
    id: 'ID'
    imageFileIds: 'ID'
    images: 'FileImage'
    name: 'String'
  }
  DesignProofLocation: { // field return type name
    colorCount: 'Int'
    designProofId: 'ID'
    file: 'File'
    fileId: 'ID'
    id: 'ID'
    placement: 'String'
  }
  DesignRequest: { // field return type name
    approvedDesignProofId: 'ID'
    approvedProof: 'DesignProof'
    conversationId: 'ID'
    createdAt: 'DateTime'
    description: 'String'
    designProducts: 'DesignProduct'
    designProofIds: 'ID'
    designRequestLocationIds: 'ID'
    designRequestLocations: 'DesignRequestDesignLocation'
    designRequestProduct: 'DesignRequestProduct'
    designRequestProductId: 'ID'
    designRevisionRequestIds: 'ID'
    designRevisionRequests: 'DesignRequestRevisionRequest'
    fileIds: 'ID'
    fileUploadDirectory: 'String'
    files: 'File'
    history: 'DesignRequestHistoryItem'
    humanizedStatus: 'String'
    id: 'ID'
    membership: 'Membership'
    membershipId: 'ID'
    name: 'String'
    previewImage: 'FileImage'
    proofs: 'DesignProof'
    status: 'DesignRequestStatus'
    updatedAt: 'DateTime'
    useCase: 'String'
  }
  DesignRequestApprovePayload: { // field return type name
    design: 'DesignProduct'
    designRequest: 'DesignRequest'
  }
  DesignRequestConnection: { // field return type name
    edges: 'DesignRequestEdge'
    pageInfo: 'PageInfo'
  }
  DesignRequestConversationMessageCreatePayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  DesignRequestCreatePayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  DesignRequestDesignLocation: { // field return type name
    description: 'String'
    fileIds: 'ID'
    fileUploadDirectory: 'String'
    files: 'File'
    id: 'ID'
    placement: 'String'
  }
  DesignRequestDesignLocationCreatePayload: { // field return type name
    designRequest: 'DesignRequest'
    designRequestDesignLocation: 'DesignRequestDesignLocation'
  }
  DesignRequestDesignLocationDeletePayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  DesignRequestDesignLocationUpdatePayload: { // field return type name
    designRequest: 'DesignRequest'
    designRequestDesignLocation: 'DesignRequestDesignLocation'
  }
  DesignRequestEdge: { // field return type name
    cursor: 'String'
    node: 'DesignRequest'
  }
  DesignRequestHistoryItemAddedPayload: { // field return type name
    historyItemAdded: 'Boolean'
  }
  DesignRequestHistoryItemDesignRequestEvent: { // field return type name
    actor: 'Membership'
    id: 'ID'
    membershipId: 'ID'
    method: 'DesignRequestHistoryItemDesignRequestEventMethod'
    timestamp: 'DateTime'
  }
  DesignRequestProduct: { // field return type name
    catalogProduct: 'CatalogProduct'
    catalogProductId: 'String'
    colors: 'DesignRequestProductColors'
    id: 'ID'
  }
  DesignRequestProductColors: { // field return type name
    catalogProductColorId: 'ID'
    hexCode: 'String'
    name: 'String'
  }
  DesignRequestProofCreatePayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  DesignRequestRevisionRequest: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    designRequestId: 'ID'
    fileIds: 'ID'
    files: 'File'
    id: 'ID'
    membership: 'Membership'
    membershipId: 'ID'
  }
  DesignRequestRevisionRequestCreatePayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  DesignRequestSubmitPayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  DesignRequestUpdatePayload: { // field return type name
    designRequest: 'DesignRequest'
  }
  FileConnection: { // field return type name
    edges: 'FileEdge'
    pageInfo: 'PageInfo'
  }
  FileCreateBatchPayload: { // field return type name
    files: 'File'
  }
  FileCreatePayload: { // field return type name
    file: 'File'
  }
  FileEdge: { // field return type name
    cursor: 'String'
    node: 'File'
  }
  FileImage: { // field return type name
    bytes: 'Int'
    createdAt: 'DateTime'
    fileType: 'FileType'
    format: 'String'
    height: 'Int'
    humanizedBytes: 'String'
    id: 'ID'
    membershipId: 'String'
    name: 'String'
    organizationId: 'String'
    updatedAt: 'DateTime'
    url: 'String'
    width: 'Int'
  }
  FilePdf: { // field return type name
    bytes: 'Int'
    createdAt: 'DateTime'
    fileType: 'FileType'
    format: 'String'
    humanizedBytes: 'String'
    id: 'ID'
    membershipId: 'String'
    name: 'String'
    organizationId: 'String'
    updatedAt: 'DateTime'
    url: 'String'
  }
  FileUnknown: { // field return type name
    bytes: 'Int'
    createdAt: 'DateTime'
    fileType: 'FileType'
    format: 'String'
    humanizedBytes: 'String'
    id: 'ID'
    membershipId: 'String'
    name: 'String'
    organizationId: 'String'
    updatedAt: 'DateTime'
    url: 'String'
  }
  Fulfillment: { // field return type name
    createdAt: 'DateTime'
    fulfillmentOrderItems: 'FulfillmentOrderItem'
    fulfillmentTrackingInfoId: 'String'
    id: 'ID'
    membershipId: 'String'
    orderId: 'String'
    organizationId: 'String'
    trackingInfo: 'FulfillmentTrackingInfo'
    updatedAt: 'DateTime'
  }
  FulfillmentCreatePayload: { // field return type name
    fulfillment: 'Fulfillment'
  }
  FulfillmentOrderItem: { // field return type name
    createdAt: 'DateTime'
    fulfillmentId: 'String'
    id: 'ID'
    orderItemId: 'String'
    quantity: 'Int'
    updatedAt: 'DateTime'
  }
  FulfillmentTrackingInfo: { // field return type name
    carrier: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    trackingNumber: 'String'
    trackingUrl: 'String'
    updatedAt: 'DateTime'
  }
  MailingAddress: { // field return type name
    address1: 'String'
    address2: 'String'
    city: 'String'
    company: 'String'
    country: 'String'
    createdAt: 'DateTime'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    latitude: 'Float'
    longitude: 'Float'
    membershipId: 'String'
    name: 'String'
    organizationId: 'String'
    phone: 'String'
    province: 'String'
    provinceCode: 'String'
    updatedAt: 'DateTime'
    zip: 'String'
  }
  MailingAddressCreatePayload: { // field return type name
    mailingAddress: 'MailingAddress'
  }
  Membership: { // field return type name
    createdAt: 'DateTime'
    designProducts: 'DesignProductConnection'
    designRequests: 'DesignRequestConnection'
    flags: 'MembershipFlags'
    hasDesignProducts: 'Boolean'
    hasDesignRequests: 'Boolean'
    hasOrders: 'Boolean'
    humanizedRole: 'String'
    id: 'ID'
    invitedEmail: 'String'
    notifications: 'NotificationConnection'
    orders: 'OrderConnection'
    organization: 'Organization'
    organizationId: 'String'
    role: 'MembershipRole'
    scopes: 'Scope'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  MembershipFlags: { // field return type name
    isBetaTester: 'Boolean'
  }
  MembershipInvite: { // field return type name
    id: 'ID'
    invitedEmail: 'String'
    membershipId: 'ID'
    organizationId: 'ID'
    organizationName: 'String'
  }
  MembershipInviteAcceptPayload: { // field return type name
    membership: 'Membership'
  }
  MembershipInvitePayload: { // field return type name
    memberships: 'Membership'
  }
  MembershipInviteResendPayload: { // field return type name
    membership: 'Membership'
  }
  MembershipInviteRevokePayload: { // field return type name
    membership: 'Membership'
  }
  Mutation: { // field return type name
    designProductCreateOrder: 'DesignProductCreateOrderPayload'
    designRequestApprove: 'DesignRequestApprovePayload'
    designRequestConversationMessageCreate: 'DesignRequestConversationMessageCreatePayload'
    designRequestCreate: 'DesignRequestCreatePayload'
    designRequestDesignLocationCreate: 'DesignRequestDesignLocationCreatePayload'
    designRequestDesignLocationDelete: 'DesignRequestDesignLocationDeletePayload'
    designRequestDesignLocationUpdate: 'DesignRequestDesignLocationUpdatePayload'
    designRequestProofCreate: 'DesignRequestProofCreatePayload'
    designRequestRevisionRequestCreate: 'DesignRequestRevisionRequestCreatePayload'
    designRequestSubmit: 'DesignRequestSubmitPayload'
    designRequestUpdate: 'DesignRequestUpdatePayload'
    fileCreate: 'FileCreatePayload'
    fileCreateBatch: 'FileCreateBatchPayload'
    fulfillmentCreate: 'FulfillmentCreatePayload'
    mailingAddressCreate: 'MailingAddressCreatePayload'
    membershipInvite: 'MembershipInvitePayload'
    membershipInviteAccept: 'MembershipInviteAcceptPayload'
    membershipInviteResend: 'MembershipInviteResendPayload'
    membershipInviteRevoke: 'MembershipInviteRevokePayload'
    orderConfirm: 'OrderConfirmPayload'
    organizationBrandColorCreate: 'OrganizationBrandColorCreatePayload'
    organizationBrandColorDelete: 'OrganizationBrandColorDeletePayload'
    organizationBrandColorUpdate: 'OrganizationBrandColorUpdatePayload'
    organizationBrandFileCreateBatch: 'OrganizationBrandFileCreateBatchPayload'
    organizationBrandFileDeleteBatch: 'OrganizationBrandFileDeleteBatchPayload'
    organizationUpdate: 'OrganizationUpdatePayload'
    paymentIntentCreate: 'PaymentIntentCreatePayload'
    subscriberCreate: 'SubscriberCreatePayload'
    userBoostrap: 'User'
    userOrganizationCreate: 'UserOrganizationCreatePayload'
    userSetOrganization: 'UserSetOrganizationPayload'
  }
  Notification: { // field return type name
    channels: 'NotificationChannel'
    createdAt: 'DateTime'
    id: 'ID'
    membershipId: 'String'
    notificationTopicId: 'String'
    notificationWorkflowId: 'String'
    organizationId: 'String'
    updatedAt: 'DateTime'
  }
  NotificationChannelEmail: { // field return type name
    channelType: 'NotificationChannelType'
    htmlBody: 'String'
    id: 'ID'
    recipientEmail: 'String'
    recipientName: 'String'
    subject: 'String'
    textBody: 'String'
  }
  NotificationChannelWeb: { // field return type name
    channelType: 'NotificationChannelType'
    ctaText: 'String'
    ctaUrl: 'String'
    id: 'ID'
    message: 'String'
  }
  NotificationConnection: { // field return type name
    edges: 'NotificationEdge'
    pageInfo: 'PageInfo'
  }
  NotificationEdge: { // field return type name
    cursor: 'String'
    node: 'Notification'
  }
  Order: { // field return type name
    createdAt: 'DateTime'
    customerEmail: 'String'
    customerFirstName: 'String'
    customerId: 'String'
    customerLastName: 'String'
    customerPhone: 'String'
    fulfillments: 'Fulfillment'
    humanOrderId: 'String'
    humanPaymentStatus: 'String'
    id: 'ID'
    itemSummaries: 'OrderItemSummary'
    items: 'OrderItem'
    lastPaymentMethod: 'PaymentMethod'
    membershipId: 'String'
    owner: 'Membership'
    paymentIntents: 'PaymentIntent'
    paymentStatus: 'OrderPaymentStatus'
    shippingAddress: 'MailingAddress'
    shippingAddressId: 'String'
    subtotalPriceCents: 'Int'
    totalAmountDueCents: 'Int'
    totalAmountPaidCents: 'Int'
    totalAmountRefundedCents: 'Int'
    totalPriceCents: 'Int'
    totalProcessingFeeCents: 'Int'
    totalShippingCents: 'Int'
    totalTaxCents: 'Int'
    type: 'OrderType'
    updatedAt: 'DateTime'
  }
  OrderConfirmPayload: { // field return type name
    order: 'Order'
  }
  OrderConnection: { // field return type name
    edges: 'OrderEdge'
    pageInfo: 'PageInfo'
  }
  OrderEdge: { // field return type name
    cursor: 'String'
    node: 'Order'
  }
  OrderItem: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    orderId: 'String'
    productId: 'String'
    productVariantId: 'String'
    quantity: 'Int'
    title: 'String'
    totalPriceCents: 'Int'
    type: 'OrderItemType'
    unitPriceCents: 'Int'
    updatedAt: 'DateTime'
  }
  OrderItemSummary: { // field return type name
    id: 'ID'
    quantity: 'Int'
    title: 'String'
    totalPriceCents: 'Int'
  }
  Organization: { // field return type name
    brand: 'OrganizationBrand'
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    id: 'ID'
    memberships: 'Membership'
    name: 'String'
    role: 'GlobalRole'
    updatedAt: 'DateTime'
  }
  OrganizationBrand: { // field return type name
    colors: 'Color'
    fileUploadDirectory: 'String'
    files: 'FileConnection'
    id: 'ID'
    organizationId: 'ID'
  }
  OrganizationBrandColorCreatePayload: { // field return type name
    brand: 'OrganizationBrand'
    color: 'Color'
  }
  OrganizationBrandColorDeletePayload: { // field return type name
    brand: 'OrganizationBrand'
    color: 'Color'
  }
  OrganizationBrandColorUpdatePayload: { // field return type name
    brand: 'OrganizationBrand'
    color: 'Color'
  }
  OrganizationBrandFileCreateBatchPayload: { // field return type name
    brand: 'OrganizationBrand'
    files: 'File'
  }
  OrganizationBrandFileDeleteBatchPayload: { // field return type name
    brand: 'OrganizationBrand'
    files: 'File'
  }
  OrganizationUpdatePayload: { // field return type name
    organization: 'Organization'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  PaymentIntent: { // field return type name
    amount: 'Int'
    clientSecret: 'String'
    id: 'String'
  }
  PaymentIntentCreatePayload: { // field return type name
    paymentIntent: 'PaymentIntent'
  }
  PaymentMethod: { // field return type name
    billingDetails: 'PaymentMethodBillingDetails'
    card: 'PaymentMethodCard'
    id: 'String'
    type: 'String'
  }
  PaymentMethodBillingDetails: { // field return type name
    city: 'String'
    country: 'String'
    email: 'String'
    line1: 'String'
    line2: 'String'
    name: 'String'
    phone: 'String'
    postalCode: 'String'
    state: 'String'
  }
  PaymentMethodCard: { // field return type name
    brand: 'String'
    expMonth: 'Int'
    expYear: 'Int'
    last4: 'String'
  }
  PrintLocation: { // field return type name
    colorCount: 'Int'
    totalCostInCents: 'Int'
  }
  Product: { // field return type name
    id: 'ID'
    priceCents: 'Int'
    quote: 'Quote'
  }
  Query: { // field return type name
    _products: 'Product'
    designProduct: 'DesignProduct'
    designProof: 'DesignProof'
    designRequest: 'DesignRequest'
    membershipInvite: 'MembershipInvite'
    order: 'Order'
    userMemberships: 'Membership'
    viewer: 'Membership'
  }
  Quote: { // field return type name
    id: 'ID'
    printLocationCount: 'Int'
    printLocations: 'PrintLocation'
    productTotalCostCents: 'Int'
    productUnitCostCents: 'Int'
  }
  Scope: { // field return type name
    action: 'ScopeAction'
    resource: 'ScopeResource'
  }
  Subscriber: { // field return type name
    email: 'String'
    id: 'String'
  }
  SubscriberCreatePayload: { // field return type name
    subscriber: 'Subscriber'
  }
  Subscription: { // field return type name
    designRequestHistoryItemAdded: 'DesignRequestHistoryItemAddedPayload'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    emailVerified: 'Boolean'
    familyName: 'String'
    givenName: 'String'
    id: 'ID'
    lastLogin: 'DateTime'
    loginsCount: 'Int'
    name: 'String'
    nickname: 'String'
    organizations: 'Organization'
    phoneNumber: 'String'
    phoneVerified: 'Boolean'
    picture: 'String'
    updatedAt: 'DateTime'
    username: 'String'
  }
  UserOrganizationCreatePayload: { // field return type name
    membership: 'Membership'
    organization: 'Organization'
  }
  UserSetOrganizationPayload: { // field return type name
    membershipId: 'String'
    organizationId: 'String'
  }
  File: { // field return type name
    bytes: 'Int'
    createdAt: 'DateTime'
    fileType: 'FileType'
    format: 'String'
    humanizedBytes: 'String'
    id: 'ID'
    membershipId: 'String'
    name: 'String'
    organizationId: 'String'
    updatedAt: 'DateTime'
    url: 'String'
  }
  NotificationChannel: { // field return type name
    channelType: 'NotificationChannelType'
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  DesignProduct: {
    quote: { // args
      quantity: number; // Int!
    }
  }
  DesignRequest: {
    proofs: { // args
      limit?: number | null; // Int
    }
  }
  Membership: {
    designProducts: { // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['MembershipDesignProductsFilterInput'] | null; // MembershipDesignProductsFilterInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    designRequests: { // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['MembershipDesignRequestsFilterInput'] | null; // MembershipDesignRequestsFilterInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    notifications: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    orders: { // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['MembershipOrdersFilterInput'] | null; // MembershipOrdersFilterInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    designProductCreateOrder: { // args
      input: NexusGenInputs['DesignProductCreateOrderInput']; // DesignProductCreateOrderInput!
    }
    designRequestApprove: { // args
      input: NexusGenInputs['DesignRequestApproveInput']; // DesignRequestApproveInput!
    }
    designRequestConversationMessageCreate: { // args
      input: NexusGenInputs['DesignRequestConversationMessageCreateInput']; // DesignRequestConversationMessageCreateInput!
    }
    designRequestCreate: { // args
      input: NexusGenInputs['DesignRequestCreateInput']; // DesignRequestCreateInput!
    }
    designRequestDesignLocationCreate: { // args
      input: NexusGenInputs['DesignRequestDesignLocationCreateInput']; // DesignRequestDesignLocationCreateInput!
    }
    designRequestDesignLocationDelete: { // args
      input: NexusGenInputs['DesignRequestDesignLocationDeleteInput']; // DesignRequestDesignLocationDeleteInput!
    }
    designRequestDesignLocationUpdate: { // args
      input: NexusGenInputs['DesignRequestDesignLocationUpdateInput']; // DesignRequestDesignLocationUpdateInput!
    }
    designRequestProofCreate: { // args
      input: NexusGenInputs['DesignRequestProofCreateInput']; // DesignRequestProofCreateInput!
    }
    designRequestRevisionRequestCreate: { // args
      input: NexusGenInputs['DesignRequestRevisionRequestCreateInput']; // DesignRequestRevisionRequestCreateInput!
    }
    designRequestSubmit: { // args
      input: NexusGenInputs['DesignRequestSubmitInput']; // DesignRequestSubmitInput!
    }
    designRequestUpdate: { // args
      input: NexusGenInputs['DesignRequestUpdateInput']; // DesignRequestUpdateInput!
    }
    fileCreate: { // args
      input: NexusGenInputs['FileCreateInput']; // FileCreateInput!
    }
    fileCreateBatch: { // args
      input: NexusGenInputs['FileCreateBatchInput']; // FileCreateBatchInput!
    }
    fulfillmentCreate: { // args
      input: NexusGenInputs['FulfillmentCreateInput']; // FulfillmentCreateInput!
    }
    mailingAddressCreate: { // args
      input: NexusGenInputs['MailingAddressCreateInput']; // MailingAddressCreateInput!
    }
    membershipInvite: { // args
      input: NexusGenInputs['MembershipInviteInput']; // MembershipInviteInput!
    }
    membershipInviteAccept: { // args
      input: NexusGenInputs['MembershipInviteAcceptInput']; // MembershipInviteAcceptInput!
    }
    membershipInviteResend: { // args
      input: NexusGenInputs['MembershipInviteResendInput']; // MembershipInviteResendInput!
    }
    membershipInviteRevoke: { // args
      input: NexusGenInputs['MembershipInviteRevokeInput']; // MembershipInviteRevokeInput!
    }
    orderConfirm: { // args
      input: NexusGenInputs['OrderConfirmInput']; // OrderConfirmInput!
    }
    organizationBrandColorCreate: { // args
      input: NexusGenInputs['OrganizationBrandColorCreateInput']; // OrganizationBrandColorCreateInput!
    }
    organizationBrandColorDelete: { // args
      input: NexusGenInputs['OrganizationBrandColorDeleteInput']; // OrganizationBrandColorDeleteInput!
    }
    organizationBrandColorUpdate: { // args
      input: NexusGenInputs['OrganizationBrandColorUpdateInput']; // OrganizationBrandColorUpdateInput!
    }
    organizationBrandFileCreateBatch: { // args
      input: NexusGenInputs['OrganizationBrandFileCreateBatchInput']; // OrganizationBrandFileCreateBatchInput!
    }
    organizationBrandFileDeleteBatch: { // args
      input: NexusGenInputs['OrganizationBrandFileDeleteBatchInput']; // OrganizationBrandFileDeleteBatchInput!
    }
    organizationUpdate: { // args
      input: NexusGenInputs['OrganizationUpdateInput']; // OrganizationUpdateInput!
    }
    paymentIntentCreate: { // args
      input: NexusGenInputs['PaymentIntentCreateInput']; // PaymentIntentCreateInput!
    }
    subscriberCreate: { // args
      input: NexusGenInputs['SubscriberCreateInput']; // SubscriberCreateInput!
    }
    userOrganizationCreate: { // args
      input: NexusGenInputs['UserOrganizationCreateInput']; // UserOrganizationCreateInput!
    }
    userSetOrganization: { // args
      input: NexusGenInputs['UserSetOrganizationInput']; // UserSetOrganizationInput!
    }
  }
  OrganizationBrand: {
    files: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Product: {
    quote: { // args
      includeFulfillment?: boolean | null; // Boolean
      printLocations: NexusGenInputs['QuoteGeneratePrintLocationInput'][]; // [QuoteGeneratePrintLocationInput!]!
      quantity: number; // Int!
    }
  }
  Query: {
    _products: { // args
      products: NexusGenInputs['ProductKey'][]; // [ProductKey!]!
    }
    designProduct: { // args
      id: string; // ID!
    }
    designProof: { // args
      id: string; // ID!
    }
    designRequest: { // args
      id: string; // ID!
    }
    membershipInvite: { // args
      id: string; // ID!
    }
    order: { // args
      id: string; // ID!
    }
  }
  Subscription: {
    designRequestHistoryItemAdded: { // args
      designRequestId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  DesignRequestHistoryItem: "ConversationMessage" | "DesignProof" | "DesignRequestHistoryItemDesignRequestEvent" | "DesignRequestRevisionRequest"
  File: "FileImage" | "FilePdf" | "FileUnknown"
  NotificationChannel: "NotificationChannelEmail" | "NotificationChannelWeb"
}

export interface NexusGenTypeInterfaces {
  FileImage: "File"
  FilePdf: "File"
  FileUnknown: "File"
  NotificationChannelEmail: "NotificationChannel"
  NotificationChannelWeb: "NotificationChannel"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "DesignRequestHistoryItem" | "File" | "NotificationChannel";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}