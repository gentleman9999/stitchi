// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Organization {
  id   String     @id @default(uuid())
  name String
  role GlobalRole

  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  organizationId String

  userId String

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, invitedEmail])
}

model Catalog {
  id String @id @default(uuid())

  materials       Material[]
  vendors         Vendor[]
  manufacturers   Manufacturer[]
  categories      Category[]
  sizes           Size[]
  colors          Color[]
  colorCategories ColorCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String  @id @default(uuid())
  name      String
  slug      String
  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [id], onUpdate: NoAction)

  parentCategoryId String?
  parentCategory   Category?  @relation(fields: [parentCategoryId], references: [id], name: "Category", onDelete: NoAction, onUpdate: NoAction)
  childCategories  Category[] @relation(name: "Category")

  materialCategories MaterialCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, slug])
}

model MaterialCategory {
  materialId String
  material   Material @relation(fields: [materialId], references: [id], onUpdate: NoAction)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([materialId, categoryId])
}

model Material {
  id String @id @default(uuid())

  name   String
  active Boolean @default(true)
  slug   String

  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [id], onUpdate: NoAction)

  primaryVendorId String?
  primaryVendor   Vendor? @relation(fields: [primaryVendorId], references: [id], onUpdate: NoAction)

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id], onUpdate: NoAction)

  materialCategories MaterialCategory[]

  materialDescription String?

  manufacturerStyleName String
  manufacturerId        String
  manufacturer          Manufacturer @relation(fields: [manufacturerId], references: [id], onUpdate: NoAction)

  materialVariants MaterialVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // manufacturerStyleName is a unique identifier for a product within the context of a single manufacturer.
  @@unique([manufacturerId, slug])
  @@unique([manufacturerId, manufacturerStyleName])
}

model MaterialVariant {
  id String @id @default(uuid())

  active           Boolean @default(true)
  vendorPartNumber String
  gtin             String
  sizeId           String?
  size             Size?   @relation(fields: [sizeId], references: [id], onUpdate: NoAction)
  colorId          String?
  color            Color?  @relation(fields: [colorId], references: [id], onUpdate: NoAction)

  materialId String
  material   Material @relation(fields: [materialId], references: [id], onUpdate: NoAction)

  materialVariantImages MaterialVariantImage[]

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MaterialVariantImage {
  imageId String
  image   Image  @relation(fields: [imageId], references: [id], onUpdate: NoAction)

  materialVariantId String
  materialVariant   MaterialVariant @relation(fields: [materialVariantId], references: [id], onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([imageId, materialVariantId])
}

model Size {
  id        String  @id @default(uuid())
  value     String
  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [id], onUpdate: NoAction)
  name      String?

  materialVariants MaterialVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, value])
}

model ColorCategory {
  id        String  @id @default(uuid())
  name      String
  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [id], onUpdate: NoAction)
  hex       String?

  colors Color[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, name])
}

model Color {
  id        String  @id @default(uuid())
  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [id], onUpdate: NoAction)
  hex       String?
  name      String?

  colorCategoryId String?
  colorCategory   ColorCategory? @relation(fields: [colorCategoryId], references: [id], onUpdate: NoAction)

  materialVariants MaterialVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Vendor {
  id   String @id @default(uuid())
  name String
  slug String

  catalogId        String
  catalog          Catalog           @relation(fields: [catalogId], references: [id], onUpdate: NoAction)
  materialVariants MaterialVariant[]
  materials        Material[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, slug])
}

model Manufacturer {
  id   String @id @default(uuid())
  name String
  slug String

  catalogId String
  catalog   Catalog    @relation(fields: [catalogId], references: [id], onUpdate: NoAction)
  materials Material[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, slug])
}

enum MembershipRole {
  OWNER
}

model Image {
  id     String    @id @default(uuid())
  // Cloudinary URL
  url    String
  type   ImageType
  width  Int
  height Int

  materials             Material[]
  materialVariantImages MaterialVariantImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ImageType {
  CLOUDINARY
}
