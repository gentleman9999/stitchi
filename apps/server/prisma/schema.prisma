// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Organization {
  id   String     @id @default(uuid())
  name String
  role GlobalRole

  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  userId String

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, invitedEmail])
}

model Catalog {
  id String @id @default(uuid())

  catalogProducts CatalogProduct[]
  vendors         Vendor[]
  manufacturers   Manufacturer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CatalogProduct {
  id String @id @default(uuid())

  name   String
  active Boolean @default(true)
  slug   String

  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [id])

  primaryVendorId String?
  primaryVendor   Vendor? @relation(fields: [primaryVendorId], references: [id])

  primaryImageId    String?
  primaryImage      ImageUrl?                @relation(fields: [primaryImageId], references: [id])
  alternativeImages CatalogProductImageUrl[]


  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CatalogProductImageUrl {
  id String @id @default(uuid())

  imageUrlId String
  image      ImageUrl @relation(fields: [imageUrlId], references: [id])

  catalogProductId String
  catalogProduct   CatalogProduct @relation(fields: [catalogProductId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CatalogProductVariant {
  id String @id @default(uuid())

  active           Boolean @default(true)
  vendorPartNumber String

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id   String @id @default(uuid())
  name String
  slug String

  catalogId              String
  catalog                Catalog                 @relation(fields: [catalogId], references: [id])
  catalogProductVariants CatalogProductVariant[]
  catalogProducts        CatalogProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, slug])
}

model Manufacturer {
  id   String @id @default(uuid())
  name String
  slug String

  catalogId       String
  catalog         Catalog          @relation(fields: [catalogId], references: [id])
  catalogProducts CatalogProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([catalogId, slug])
}

enum MembershipRole {
  OWNER
}

model ImageUrl {
  id     String       @id @default(uuid())
  // Cloudinary URL
  url    String
  type   ImageUrlType
  width  Int
  height Int

  catalogProducts         CatalogProduct[]
  catalogProductImageUrls CatalogProductImageUrl[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ImageUrlType {
  CLOUDINARY
}
