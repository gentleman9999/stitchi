// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model File {
  id             String  @id @default(uuid())
  userId         String?
  organizationId String?

  fileType FileType

  url String

  bytes Int

  originalFilename String
  name             String

  cloudinaryAssetId String?

  width  Int?
  height Int?

  format String

  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  designRequestFiles              DesignRequestFile[]
  designRequestPrintLocationFiles DesignRequestDesignLocationFile[]
  designProofFiles                DesignProofFile[]
  designProofLocations            DesignProofLocation[]
}

enum FileType {
  IMAGE
  VIDEO
  PDF
  UNKNOWN
}

model Organization {
  id   String     @id @default(uuid())
  name String
  role GlobalRole

  memberships Membership[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Order                Order[]
  Design               Design[]
  ActiveUserMembership ActiveUserMembership[]
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  organizationId String

  userId String

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ActiveUserMembership ActiveUserMembership[]

  @@unique([organizationId, invitedEmail])
}

model ActiveUserMembership {
  id             String @id @default(uuid())
  userId         String @unique
  membershipId   String
  organizationId String

  membership   Membership   @relation(fields: [membershipId], references: [id], onUpdate: NoAction)
  organization Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)

  @@index([membershipId])
  @@index([organizationId])
}

enum MembershipRole {
  OWNER
  STITCHI_DESIGNER
}

model Order {
  // We want an auto-incrementing numeric ID to make a human-readable order number
  id String @id @default(uuid())

  humanReadableId String

  // The organization that this order belongs to
  organizationId String?

  // The user that placed the order
  userId String?

  customerFirstName String?
  customerLastName  String?
  customerEmail     String?
  customerPhone     String?

  // Subtotal of order pre tax, shipping, and fees
  subtotalPriceCents Int

  // The total tax applied to the order
  totalTaxCents Int

  // The total shipping price of the order
  totalShippingCents Int

  totalProcessingFeeCents Int

  // The total price of the order
  totalPriceCents Int

  // The total amount that has been paid by the customer
  totalAmountPaidCents Int

  // The total amount that has been refunded by the customer
  totalAmountRefundedCents Int

  // The amount owed by the customer
  totalAmountDueCents Int

  // Order payment status
  paymentStatus OrderPaymentStatus @default(NOT_PAID)

  // The type of order
  type OrderType

  shippingAddressId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItems      OrderItem[]
  Organization    Organization?   @relation(fields: [organizationId], references: [id])
  Fulfillment     Fulfillment[]
  ShippingAddress MailingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@unique([humanReadableId, organizationId, userId])
  @@index([organizationId])
  @@index([shippingAddressId])
}

enum OrderPaymentStatus {
  // Product is in the cart
  NOT_PAID

  // Product is in the cart
  PARTIALLY_PAID

  // Product is in the cart
  PAID

  // Product is in the cart
  PARTIALLY_REFUNDED

  // Product is in the cart
  REFUNDED
}

enum OrderType {
  // Order has been created for the purposes of storing a users cart
  CART

  // Order has been confirmed by either the user or Stitchi admin
  CONFIRMED
}

model OrderItem {
  id String @id @default(uuid())

  // The order that this item belongs to
  order   Order  @relation(fields: [orderId], references: [id], onUpdate: NoAction)
  orderId String

  // The fulfillment status of the line item
  fulfillmentStatus OrderItemFulfillmentStatus @default(NOT_FULFILLED)

  // The quantity of the line item
  quantity Int

  // The price of the line item at the time of purchase
  unitPriceCents Int

  totalPriceCents Int

  // The name of the line item
  title String

  // The type of the line item
  type OrderItemType

  // The product ID (could be BicCommerce or Shopify or internal, etc..)
  productId String?

  // The product variant ID (could be BicCommerce or Shopify or internal, etc..)
  productVariantId String?

  // The optional design ID
  designId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Design               Design?                @relation(fields: [designId], references: [id])
  FulfillmentOrderItem FulfillmentOrderItem[]

  @@index([orderId])
  @@index([designId])
}

enum OrderItemFulfillmentStatus {
  // Product is in the cart
  NOT_FULFILLED

  // Product is in the cart
  PARTIALLY_FULFILLED

  // Product is in the cart
  FULFILLED
}

enum OrderItemType {
  // BigCommerce product
  BIG_C_PRODUCT

  // Custom line item (no product associated)
  CUSTOM
}

model Fulfillment {
  id String @id @default(uuid())

  // The order that this fulfillment belongs to
  orderId String

  fulfillmentTrackingInfoId String

  // The user that created the fulfillment
  userId         String?
  organizationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  FulfillmentOrderItems   FulfillmentOrderItem[]
  Order                   Order                   @relation(fields: [orderId], references: [id])
  FulfillmentTrackingInfo FulfillmentTrackingInfo @relation(fields: [fulfillmentTrackingInfoId], references: [id])

  @@index([orderId])
  @@index([fulfillmentTrackingInfoId])
}

model FulfillmentTrackingInfo {
  id String @id @default(uuid())

  // The tracking number
  trackingNumber String

  // The tracking URL
  trackingUrl String

  // The carrier
  carrier String

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Fulfillments Fulfillment[]
}

model FulfillmentOrderItem {
  id String @id @default(uuid())

  // The order item that this fulfillment belongs to
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onUpdate: NoAction)
  orderItemId String

  fulfillment   Fulfillment @relation(fields: [fulfillmentId], references: [id], onUpdate: NoAction)
  fulfillmentId String

  // The quantity of the line item
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderItemId])
  @@index([fulfillmentId])
}

model Design {
  id String @id @default(uuid())

  // The organization that this design belongs to
  organization   Organization? @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  organizationId String?

  // The user that created the design
  userId String?

  // The name of the design
  name String

  // The description of the design
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DesignLocation DesignLocation[]
  OrderItem      OrderItem[]

  @@index([organizationId])
}

model DesignLocation {
  id String @id @default(uuid())

  // The design that this location belongs to
  design   Design @relation(fields: [designId], references: [id], onUpdate: NoAction)
  designId String

  colorCount Int

  // The name of the location
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([designId])
}

model DesignRequest {
  id String @id @default(uuid())

  // The user that this design request belongs to
  userId String?

  // The organization that this design request belongs to
  organizationId String?

  // The name of the design request
  name String

  // The description of the design request
  description String? @db.Text

  metadata Json?

  // The status of the design request
  status DesignRequestStatus @default(DRAFT)

  designLocations DesignRequestDesignLocation[]

  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  designRequestFiles        DesignRequestFile[]
  designRequestArtists      DesignRequestArtist[]
  designRequestDesignProofs DesignRequestDesignProof[]
}

model DesignRequestArtist {
  id String @id @default(uuid())

  isActive Boolean @default(true)

  designRequestId String

  artistUserId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  designRequest DesignRequest @relation(fields: [designRequestId], references: [id])

  @@index([artistUserId])
  @@index([designRequestId])
}

enum DesignRequestStatus {
  // Design request is a draft and hasn't been submitted yet
  DRAFT
  // Design request has been submitted and work has begun
  SUBMITTED
  // Design request has been approved
  APPROVED
  // Design request is awaiting revision from Stitchi
  AWAITING_REVISION
  // Design request is awaiting approval from the user
  AWAITING_APPROVAL
  // Design request is rejected (by Stitchi). This can happen if design subject is not appropriate.
  REJECTED
}

model DesignRequestFile {
  id String @id @default(uuid())

  // The design request that this file belongs to
  designRequestId String
  fileId          String

  designRequest DesignRequest @relation(fields: [designRequestId], references: [id])
  file          File          @relation(fields: [fileId], references: [id])

  @@index([designRequestId])
  @@index([fileId])
}

model DesignRequestDesignLocation {
  id String @id @default(uuid())

  designRequestId String

  // The description of the print location
  description String? @db.Text

  placement String?

  designRequest                    DesignRequest                     @relation(fields: [designRequestId], references: [id])
  designRequestDesignLocationFiles DesignRequestDesignLocationFile[]

  @@index([designRequestId])
}

model DesignRequestDesignLocationFile {
  id String @id @default(uuid())

  // The design request print location that this file belongs to
  designRequestDesignLocationId String
  fileId                        String

  designRequestPrintLocation DesignRequestDesignLocation @relation(fields: [designRequestDesignLocationId], references: [id], onDelete: Cascade)
  File                       File                        @relation(fields: [fileId], references: [id])

  @@index([designRequestDesignLocationId])
  @@index([fileId])
}

model DesignRequestDesignProof {
  id String @id @default(uuid())

  // The design request that this proof belongs to
  designRequestId String
  designProofId   String

  designRequest DesignRequest @relation(fields: [designRequestId], references: [id])
  designProof   DesignProof   @relation(fields: [designProofId], references: [id])

  @@index([designRequestId])
  @@index([designProofId])
}

model DesignProof {
  id String @id @default(uuid())

  artistUserId String

  note String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  designProofLocations      DesignProofLocation[]
  designProofFiles          DesignProofFile[]
  designRequestDesignProofs DesignRequestDesignProof[]
}

model DesignProofLocation {
  id String @id @default(uuid())

  designProofId String
  fileId        String

  placement  String?
  colorCount Int?

  designProof DesignProof @relation(fields: [designProofId], references: [id], onDelete: Cascade)
  file        File        @relation(fields: [fileId], references: [id])

  @@index([designProofId])
  @@index([fileId])
}

model DesignProofFile {
  id String @id @default(uuid())

  // The design request proof print location that this file belongs to
  fileId        String
  designProofId String

  file File @relation(fields: [fileId], references: [id])

  designProof DesignProof @relation(fields: [designProofId], references: [id])

  @@index([fileId])
  @@index([designProofId])
}

model MailingAddress {
  id String @id @default(uuid())

  userId         String?
  organizationId String?

  name    String?
  phone   String?
  company String?

  address1 String?
  address2 String?
  city     String?
  country  String?

  // The region of the address, such as the province, state, or district.
  province String?

  // The two-letter code for the region. (For example, ON.)
  provinceCode String?
  zip          String?

  firstName String?
  lastName  String?

  latitude  Float?
  longitude Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

model Notification {
  id String @id @default(uuid())

  // The user that this notification belongs to
  userId String?

  // The organization that this notification belongs to
  organizationId String?

  notificationEmailId String?
  NotificationEmail   NotificationEmail? @relation(fields: [notificationEmailId], references: [id], onUpdate: NoAction)

  sendAt DateTime?

  // The type of notification
  type NotificationType

  // The status of the notification
  sendStatus NotificationSendStatus @default(NOT_SENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([notificationEmailId])
}

enum NotificationType {
  ORDER_CONFIRMED
}

enum NotificationSendStatus {
  NOT_SENT
  SENT
}

model NotificationEmail {
  id String @id @default(uuid())

  subject String

  htmlBody String @db.Text

  textBody String? @db.Text

  recipientEmail String
  recipientName  String?

  Notification Notification[]
}
