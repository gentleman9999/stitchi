### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AllNewsletterIssuesFilter {
  first: Int!
  skip: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum GlobalRole {
  CUSTOMER
  SUPERADMIN
}

type Membership {
  createdAt: DateTime!
  id: ID!
  organization: Organization
  organizationId: String!
  role: MembershipRole
  updatedAt: DateTime
  user: User
  userId: String!
}

enum MembershipRole {
  OWNER
}

type Mutation {
  """Creates a new subscriber"""
  subscriberCreate(email: String!): SubscriberCreatePayload

  """Bootstraps a new user with necessary resources"""
  userBoostrap: User
}

type Newsletter {
  allNewsletterIssues(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): NewsletterIssueConnection
  newsletterIssue(slug: String!): NewsletterIssue!
}

type NewsletterIssue {
  authorNames: [String]!
  contentHtml: String!
  createdAt: DateTime!
  displayAt: DateTime
  id: ID!
  publishedAt: DateTime
  slug: String!
  status: NewsletterIssueStatus!
  subtitle: String!
  thumbnailUrl: String
  title: String!
}

type NewsletterIssueConnection {
  nodes: [NewsletterIssue]!
  totalCount: Int!
}

type NewsletterIssueEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: NewsletterIssue
}

enum NewsletterIssueStatus {
  ARCHIVED
  CONFIRMED
  DRAFT
}

type Organization {
  createdAt: DateTime!
  id: ID!
  memberships: [Membership]
  name: String
  role: GlobalRole
  updatedAt: DateTime
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  newsletter: Newsletter
  viewer: Membership
}

type Subscriber {
  email: String!
  id: String!
}

type SubscriberCreatePayload {
  subscriber: Subscriber
}

type User {
  createdAt: DateTime
  email: String
  emailVerified: Boolean
  familyName: String
  givenName: String
  id: ID
  lastLogin: DateTime
  loginsCount: Int
  name: String
  nickname: String
  phoneNumber: String
  phoneVerified: Boolean
  picture: String
  updatedAt: DateTime
  username: String
}