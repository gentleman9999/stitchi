### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CatalogBrand {
  id: ID!
  name: String!
  slug: String!
}

type CatalogCategory {
  bigCommerceEntityId: ID!
  description: String
  name: String!
  subcategories: CatalogCategory
}

type CatalogProduct {
  brand: CatalogBrand
  brandId: ID
  categoryIds: [ID!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  images: [CatalogProductImage!]!
  name: String!
  priceCents: Int!
  primaryImage: CatalogProductImage
  relatedProductIds: [ID!]!
  slug: String!
  updatedAt: DateTime!
  visible: Boolean!
}

type CatalogProductImage {
  order: Int
  url: String!
}

type Color {
  cmykC: Int
  cmykK: Int
  cmykM: Int
  cmykY: Int
  hex: String!
  id: String!
  name: String!
  pantone: String
}

type Conversation {
  id: ID!
  messages: [ConversationMessage!]!
}

type ConversationMessage {
  conversationId: ID!
  createdAt: DateTime!
  fileIds: [ID!]!
  files: [File!]!
  id: ID!
  message: String!
  sender: Membership
  senderMembershipId: ID
  viewerIsSender: Boolean!
}

input DateFilterInput {
  gte: String
  lte: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DesignProduct {
  catalogProductId: ID!
  colors: [DesignProductColor!]!
  createdAt: DateTime!
  description: String
  designProofId: ID!
  designRequestId: ID!
  id: ID!
  inProductionQty: Int!
  inStockQty: Int!
  membershipId: ID
  minUnitPriceCents: Int
  name: String!
  organizationId: ID
  primaryImageFile: FileImage
  primaryImageFileId: ID
  quote(quantity: Int!): Quote
  sizes: [DesignProductSize!]
  termsConditionsAgreed: Boolean!
  updatedAt: DateTime!
  variants: [DesignProductVariant!]!
}

type DesignProductColor {
  catalogProductColorId: ID!
  designRequestProductId: ID!
  hex: String
  id: ID!
  imageFileIds: [ID!]!
  images: [FileImage!]!
  name: String
}

type DesignProductConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [DesignProductEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input DesignProductCreateOrderInput {
  designProductId: ID!
  orderItems: [DesignProductCreateOrderItemInput!]!
  shippingAddressId: ID
}

input DesignProductCreateOrderItemInput {
  catalogProductVariantId: ID!
  quantity: Int!
}

type DesignProductCreateOrderPayload {
  order: Order
}

type DesignProductEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: DesignProduct
}

type DesignProductSize {
  id: ID!
  name: String!
}

type DesignProductVariant {
  catalogProductColorId: ID
  catalogProductId: ID!
  catalogProductSizeId: ID
  catalogProductVariantId: ID!
  id: ID!
  sizeName: String
}

type DesignProof {
  artist: Membership
  artistMembershipId: ID!
  colors: [DesignProofColor!]!
  createdAt: DateTime!
  designProofColorIds: [ID!]!
  designProofLocationIds: [ID!]!
  id: ID!
  locations: [DesignProofLocation!]!
  membership: Membership
  primaryImageFile: FileImage
  primaryImageFileId: ID
}

type DesignProofColor {
  catalogProductColorId: ID!
  designProofId: ID!
  hexCode: String
  id: ID!
  imageFileIds: [ID!]!
  images: [FileImage!]!
  name: String
}

type DesignProofLocation {
  colorCount: Int
  designProofId: ID!
  file: File
  fileId: ID!
  id: ID!
  placement: String
}

type DesignRequest {
  approvedDesignProofId: ID
  approvedProof: DesignProof
  conversationId: ID
  createdAt: DateTime!
  description: String
  designProducts: [DesignProduct!]!
  designProofIds: [ID!]!
  designRequestLocationIds: [ID!]!
  designRequestLocations: [DesignRequestDesignLocation!]!
  designRequestProduct: DesignRequestProduct!
  designRequestProductId: ID!
  designRevisionRequestIds: [ID!]!
  designRevisionRequests: [DesignRequestRevisionRequest!]!
  fileIds: [ID!]!
  fileUploadDirectory: String!
  files: [File!]!
  history: [DesignRequestHistoryItem!]!
  humanizedStatus: String!
  id: ID!
  membership: Membership
  membershipId: ID
  name: String!
  previewImage: FileImage
  proofs(limit: Int): [DesignProof!]!
  status: DesignRequestStatus!
  updatedAt: DateTime
  useCase: String
}

input DesignRequestApproveInput {
  description: String
  designProofId: ID!
  designRequestId: ID!
  name: String!
  termsConditionsAgreed: Boolean!
}

type DesignRequestApprovePayload {
  design: DesignProduct
  designRequest: DesignRequest
}

input DesignRequestAssignInput {
  designRequestId: String!
  membershipId: String!
}

type DesignRequestAssignPayload {
  designRequest: DesignRequest
}

type DesignRequestConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [DesignRequestEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input DesignRequestConversationMessageCreateInput {
  designRequestId: ID!
  fileIds: [String!]!
  message: String!
}

type DesignRequestConversationMessageCreatePayload {
  designRequest: DesignRequest
}

input DesignRequestCreateInput {
  description: String
  name: String
  product: DesignRequestProductCreateInput!
  useCase: String
}

type DesignRequestCreatePayload {
  designRequest: DesignRequest
}

type DesignRequestDesignLocation {
  description: String
  fileIds: [ID!]!
  fileUploadDirectory: String!
  files: [File!]!
  id: ID!
  placement: String
}

input DesignRequestDesignLocationCreateInput {
  description: String
  designRequestId: ID!
  fileIds: [ID!]!
  placement: String!
}

type DesignRequestDesignLocationCreatePayload {
  designRequest: DesignRequest
  designRequestDesignLocation: DesignRequestDesignLocation
}

input DesignRequestDesignLocationDeleteInput {
  designRequestDesignLocationId: ID!
  designRequestId: ID!
}

type DesignRequestDesignLocationDeletePayload {
  designRequest: DesignRequest
}

input DesignRequestDesignLocationUpdateInput {
  description: String
  designRequestDesignLocationId: ID!
  designRequestId: ID!
  fileIds: [ID!]!
  placement: String
}

type DesignRequestDesignLocationUpdatePayload {
  designRequest: DesignRequest
  designRequestDesignLocation: DesignRequestDesignLocation
}

type DesignRequestEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: DesignRequest
}

union DesignRequestHistoryItem = ConversationMessage | DesignProof | DesignRequestHistoryItemDesignRequestEvent | DesignRequestRevisionRequest

type DesignRequestHistoryItemAddedPayload {
  historyItemAdded: Boolean!
}

type DesignRequestHistoryItemDesignRequestEvent {
  actor: Membership
  id: ID!
  membershipId: ID
  method: DesignRequestHistoryItemDesignRequestEventMethod!
  timestamp: DateTime!
}

enum DesignRequestHistoryItemDesignRequestEventMethod {
  CREATE
}

type DesignRequestProduct {
  catalogProduct: CatalogProduct
  catalogProductId: String!
  colors: [DesignRequestProductColors!]!
  id: ID!
}

input DesignRequestProductColorCreateInput {
  catalogProductColorId: ID!
  hexCode: String
  name: String
}

type DesignRequestProductColors {
  catalogProductColorId: ID!
  hexCode: String
  name: String
}

input DesignRequestProductCreateInput {
  catalogProductId: ID!
  colors: [DesignRequestProductColorCreateInput!]!
}

input DesignRequestProofCreateInput {
  designRequestId: ID!
  message: String
  primaryImageFileId: String!
  proofLocations: [DesignRequestProofCreateProofLocationInput!]!
  proofVariants: [DesignRequestProofCreateProofVariantInput!]!
}

type DesignRequestProofCreatePayload {
  designRequest: DesignRequest
}

input DesignRequestProofCreateProofLocationInput {
  colorCount: Int
  fileId: ID!
  placement: String!
}

input DesignRequestProofCreateProofVariantInput {
  catalogProductColorId: ID!
  hexCode: String!
  imageFileIds: [ID!]!
  name: String!
}

type DesignRequestRevisionRequest {
  createdAt: DateTime!
  description: String!
  designRequestId: ID!
  fileIds: [ID!]!
  files: [File!]!
  id: ID!
  membership: Membership
  membershipId: ID!
}

input DesignRequestRevisionRequestCreateInput {
  description: String!
  designRequestId: ID!
  fileIds: [String!]!
}

type DesignRequestRevisionRequestCreatePayload {
  designRequest: DesignRequest
}

enum DesignRequestStatus {
  APPROVED
  AWAITING_APPROVAL
  AWAITING_REVISION
  DRAFT
  REJECTED
  SUBMITTED
}

input DesignRequestSubmitInput {
  designRequestId: ID!
}

type DesignRequestSubmitPayload {
  designRequest: DesignRequest
}

input DesignRequestUpdateInput {
  description: String
  designRequestId: ID!
  fileIds: [ID!]
  locations: [DesignRequestUpdateLocationInput!]
  name: String
  useCase: String
}

input DesignRequestUpdateLocationInput {
  description: String
  designLocationId: ID
  fileIds: [ID!]
  placement: String
}

type DesignRequestUpdatePayload {
  designRequest: DesignRequest
}

interface File {
  bytes: Int!
  createdAt: DateTime!
  fileType: FileType!
  format: String!
  humanizedBytes: String!
  id: ID!
  membershipId: String
  name: String!
  organizationId: String
  updatedAt: DateTime
  url: String!
}

type FileConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FileEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input FileCreateBatchInput {
  files: [FileCreateInput!]!
}

type FileCreateBatchPayload {
  files: [File!]
}

input FileCreateInput {
  bytes: Int!
  cloudinaryAssetId: String
  fileType: FileType!
  format: String!
  height: Int
  name: String!
  originalFilename: String!
  url: String!
  width: Int
}

type FileCreatePayload {
  file: File
}

type FileEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: File
}

type FileImage implements File {
  bytes: Int!
  createdAt: DateTime!
  fileType: FileType!
  format: String!
  height: Int!
  humanizedBytes: String!
  id: ID!
  membershipId: String
  name: String!
  organizationId: String
  updatedAt: DateTime
  url: String!
  width: Int!
}

type FilePdf implements File {
  bytes: Int!
  createdAt: DateTime!
  fileType: FileType!
  format: String!
  humanizedBytes: String!
  id: ID!
  membershipId: String
  name: String!
  organizationId: String
  updatedAt: DateTime
  url: String!
}

enum FileType {
  IMAGE
  PDF
  UNKNOWN
  VIDEO
}

type FileUnknown implements File {
  bytes: Int!
  createdAt: DateTime!
  fileType: FileType!
  format: String!
  humanizedBytes: String!
  id: ID!
  membershipId: String
  name: String!
  organizationId: String
  updatedAt: DateTime
  url: String!
}

type Fulfillment {
  createdAt: DateTime!
  fulfillmentOrderItems: [FulfillmentOrderItem!]!
  fulfillmentTrackingInfoId: String!
  id: ID!
  membershipId: String
  orderId: String!
  organizationId: String
  trackingInfo: FulfillmentTrackingInfo!
  updatedAt: DateTime!
}

input FulfillmentCreateInput {
  carrier: String!
  orderId: String!
  trackingNumber: String!
  trackingUrl: String!
}

type FulfillmentCreatePayload {
  fulfillment: Fulfillment
}

type FulfillmentOrderItem {
  createdAt: DateTime!
  fulfillmentId: String!
  id: ID!
  orderItemId: String!
  quantity: Int!
  updatedAt: DateTime!
}

type FulfillmentTrackingInfo {
  carrier: String!
  createdAt: DateTime!
  id: ID!
  trackingNumber: String!
  trackingUrl: String!
  updatedAt: DateTime!
}

enum GlobalRole {
  CUSTOMER
  SUPERADMIN
}

type MailingAddress {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  createdAt: DateTime!
  firstName: String
  id: ID!
  lastName: String
  latitude: Float
  longitude: Float
  membershipId: String
  name: String
  organizationId: String
  phone: String
  province: String
  provinceCode: String
  updatedAt: DateTime!
  zip: String
}

input MailingAddressCreateInput {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  firstName: String
  lastName: String
  name: String
  phone: String
  province: String
  provinceCode: String
  zip: String
}

type MailingAddressCreatePayload {
  mailingAddress: MailingAddress
}

type Membership {
  createdAt: DateTime!
  designProducts(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    filter: MembershipDesignProductsFilterInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): DesignProductConnection!
  designRequests(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    filter: MembershipDesignRequestsFilterInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): DesignRequestConnection!
  flags: MembershipFlags!
  hasDesignProducts: Boolean!
  hasDesignRequests: Boolean!
  hasOrders: Boolean!
  humanizedRole: String
  id: ID!
  invitedEmail: String
  notifications(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): NotificationConnection
  orders(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    filter: MembershipOrdersFilterInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): OrderConnection
  organization: Organization!
  organizationId: String!
  role: MembershipRole
  scopes: [Scope!]!
  unassignedDesignRequests(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): DesignRequestConnection!
  unseenWebNotificationsCount: Int!
  updatedAt: DateTime
  user: User
  userId: String
}

input MembershipDesignProductsFilterInput {
  where: MembershipDesignProductsWhereFilterInput
}

input MembershipDesignProductsWhereFilterInput {
  createdAt: DateFilterInput
  membershipId: StringFilterInput
}

input MembershipDesignRequestsFilterInput {
  where: MembershipDesignRequestsWhereFilterInput
}

input MembershipDesignRequestsWhereFilterInput {
  createdAt: DateFilterInput
  membershipId: StringFilterInput
  status: MembershipDesignRequestsWhereFilterStatusInput
}

input MembershipDesignRequestsWhereFilterStatusInput {
  equals: DesignRequestStatus
  in: [DesignRequestStatus!]
  notIn: [DesignRequestStatus!]
}

type MembershipFlags {
  isBetaTester: Boolean!
}

type MembershipInvite {
  accepted: Boolean!
  id: ID!
  invitedEmail: String
  membershipId: ID!
  organizationId: ID!
  organizationName: String
}

input MembershipInviteAcceptInput {
  membershipId: String!
}

type MembershipInviteAcceptPayload {
  membership: Membership!
}

input MembershipInviteInput {
  emails: [String!]!
}

type MembershipInvitePayload {
  memberships: [Membership!]!
}

input MembershipInviteResendInput {
  membershipId: String!
}

type MembershipInviteResendPayload {
  membership: Membership!
}

input MembershipInviteRevokeInput {
  membershipId: String!
}

type MembershipInviteRevokePayload {
  membership: Membership!
}

input MembershipOrdersFilterInput {
  where: MembershipOrdersWhereFilterInput
}

input MembershipOrdersWhereFilterInput {
  createdAt: DateFilterInput
}

enum MembershipRole {
  OWNER
  STITCHI_ADMIN
  STITCHI_DESIGNER
}

type Mutation {
  designProductCreateOrder(input: DesignProductCreateOrderInput!): DesignProductCreateOrderPayload
  designRequestApprove(input: DesignRequestApproveInput!): DesignRequestApprovePayload
  designRequestAssign(input: DesignRequestAssignInput!): DesignRequestAssignPayload
  designRequestConversationMessageCreate(input: DesignRequestConversationMessageCreateInput!): DesignRequestConversationMessageCreatePayload
  designRequestCreate(input: DesignRequestCreateInput!): DesignRequestCreatePayload
  designRequestDesignLocationCreate(input: DesignRequestDesignLocationCreateInput!): DesignRequestDesignLocationCreatePayload
  designRequestDesignLocationDelete(input: DesignRequestDesignLocationDeleteInput!): DesignRequestDesignLocationDeletePayload
  designRequestDesignLocationUpdate(input: DesignRequestDesignLocationUpdateInput!): DesignRequestDesignLocationUpdatePayload
  designRequestProofCreate(input: DesignRequestProofCreateInput!): DesignRequestProofCreatePayload
  designRequestRevisionRequestCreate(input: DesignRequestRevisionRequestCreateInput!): DesignRequestRevisionRequestCreatePayload
  designRequestSubmit(input: DesignRequestSubmitInput!): DesignRequestSubmitPayload
  designRequestUpdate(input: DesignRequestUpdateInput!): DesignRequestUpdatePayload
  fileCreate(input: FileCreateInput!): FileCreatePayload
  fileCreateBatch(input: FileCreateBatchInput!): FileCreateBatchPayload
  fulfillmentCreate(input: FulfillmentCreateInput!): FulfillmentCreatePayload

  """Creates a new mailing address for the user"""
  mailingAddressCreate(input: MailingAddressCreateInput!): MailingAddressCreatePayload
  membershipInvite(input: MembershipInviteInput!): MembershipInvitePayload
  membershipInviteAccept(input: MembershipInviteAcceptInput!): MembershipInviteAcceptPayload
  membershipInviteResend(input: MembershipInviteResendInput!): MembershipInviteResendPayload
  membershipInviteRevoke(input: MembershipInviteRevokeInput!): MembershipInviteRevokePayload
  notificationMarkAsSeen(input: NotificationMarkAsSeenInput!): NotificationMarkAsSeenPayload

  """Confirms an order with a customers details"""
  orderConfirm(input: OrderConfirmInput!): OrderConfirmPayload
  organizationBrandColorCreate(input: OrganizationBrandColorCreateInput!): OrganizationBrandColorCreatePayload
  organizationBrandColorDelete(input: OrganizationBrandColorDeleteInput!): OrganizationBrandColorDeletePayload
  organizationBrandColorUpdate(input: OrganizationBrandColorUpdateInput!): OrganizationBrandColorUpdatePayload
  organizationBrandFileCreateBatch(input: OrganizationBrandFileCreateBatchInput!): OrganizationBrandFileCreateBatchPayload
  organizationBrandFileDeleteBatch(input: OrganizationBrandFileDeleteBatchInput!): OrganizationBrandFileDeleteBatchPayload
  organizationUpdate(input: OrganizationUpdateInput!): OrganizationUpdatePayload
  paymentIntentCreate(input: PaymentIntentCreateInput!): PaymentIntentCreatePayload

  """Creates a new email subscriber"""
  subscriberCreate(input: SubscriberCreateInput!): SubscriberCreatePayload

  """Bootstraps a new user with necessary resources"""
  userBoostrap: User
  userOrganizationCreate(input: UserOrganizationCreateInput!): UserOrganizationCreatePayload
  userSetOrganization(input: UserSetOrganizationInput!): UserSetOrganizationPayload
}

type Notification {
  channels: [NotificationChannel]!
  createdAt: DateTime!
  id: ID!
  membershipId: String
  notificationTopicId: String
  notificationWorkflowId: String!
  organizationId: String
  updatedAt: DateTime
}

interface NotificationChannel {
  channelType: NotificationChannelType!
  id: ID!
}

type NotificationChannelEmail implements NotificationChannel {
  channelType: NotificationChannelType!
  htmlBody: String!
  id: ID!
  recipientEmail: String!
  recipientName: String
  subject: String!
  textBody: String
}

enum NotificationChannelType {
  EMAIL
  WEB
}

type NotificationChannelWeb implements NotificationChannel {
  channelType: NotificationChannelType!
  ctaText: String
  ctaUrl: String
  id: ID!
  message: String!
  seenAt: DateTime
}

type NotificationConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [NotificationEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type NotificationEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Notification
}

input NotificationMarkAsSeenInput {
  notificationId: ID!
}

type NotificationMarkAsSeenPayload {
  notification: Notification
}

type Order {
  createdAt: DateTime!
  customerEmail: String
  customerFirstName: String
  customerId: String
  customerLastName: String
  customerPhone: String
  fulfillments: [Fulfillment!]!
  humanOrderId: String!
  humanPaymentStatus: String!
  id: ID!
  itemSummaries: [OrderItemSummary!]!
  items: [OrderItem!]!
  lastPaymentMethod: PaymentMethod
  membershipId: String
  owner: Membership
  paymentIntents: [PaymentIntent!]!
  paymentStatus: OrderPaymentStatus!
  shippingAddress: MailingAddress
  shippingAddressId: String
  subtotalPriceCents: Int!
  totalAmountDueCents: Int!
  totalAmountPaidCents: Int!
  totalAmountRefundedCents: Int!
  totalPriceCents: Int!
  totalProcessingFeeCents: Int!
  totalShippingCents: Int!
  totalTaxCents: Int!
  type: OrderType!
  updatedAt: DateTime
}

input OrderCartCreateItemsInput {
  productVariantEntityId: Int!
  quantity: Int!
}

input OrderCartCreatePrintLocationInput {
  colorCount: Int!
}

input OrderConfirmInput {
  customerEmail: String!
  customerFirstName: String!
  customerLastName: String!
  customerPhone: String!
  orderId: ID!
  shippingAddress: OrderConfirmMailingAddressInput!
}

input OrderConfirmMailingAddressInput {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  firstName: String
  lastName: String
  name: String
  phone: String
  province: String
  provinceCode: String
  zip: String
}

type OrderConfirmPayload {
  order: Order
}

type OrderConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [OrderEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type OrderEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Order
}

type OrderItem {
  createdAt: DateTime!
  id: ID!
  orderId: String!
  productId: String
  productVariantId: String
  quantity: Int!
  title: String!
  totalPriceCents: Int!
  type: OrderItemType!
  unitPriceCents: Int!
  updatedAt: DateTime
}

type OrderItemSummary {
  id: ID!
  quantity: Int!
  title: String!
  totalPriceCents: Int!
}

enum OrderItemType {
  BIG_COMMERCE_PRODUCT
  CUSTOM
}

enum OrderPaymentStatus {
  NOT_PAID
  PAID
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  REFUNDED
}

enum OrderType {
  CART
  CONFIRMED
}

type Organization {
  brand: OrganizationBrand
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  memberships: [Membership!]!
  name: String
  role: GlobalRole
  updatedAt: DateTime!
}

type OrganizationBrand {
  colors: [Color!]!
  fileUploadDirectory: String!
  files(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FileConnection!
  id: ID!
  organizationId: ID!
}

input OrganizationBrandColorCreateInput {
  cmykC: Int!
  cmykK: Int!
  cmykM: Int!
  cmykY: Int!
  hex: String!
  name: String!
  organizationId: ID!
  pantone: String
}

type OrganizationBrandColorCreatePayload {
  brand: OrganizationBrand
  color: Color!
}

input OrganizationBrandColorDeleteInput {
  colorId: String!
  organizationId: ID!
}

type OrganizationBrandColorDeletePayload {
  brand: OrganizationBrand
  color: Color!
}

input OrganizationBrandColorUpdateInput {
  cmykC: Int!
  cmykK: Int!
  cmykM: Int!
  cmykY: Int!
  hex: String!
  id: String!
  name: String!
  organizationId: ID!
  pantone: String
}

type OrganizationBrandColorUpdatePayload {
  brand: OrganizationBrand
  color: Color!
}

input OrganizationBrandFileCreateBatchFileInput {
  fileId: ID!
}

input OrganizationBrandFileCreateBatchInput {
  files: [OrganizationBrandFileCreateBatchFileInput!]!
  organizationId: ID!
}

type OrganizationBrandFileCreateBatchPayload {
  brand: OrganizationBrand
  files: [File!]!
}

input OrganizationBrandFileDeleteBatchInput {
  fileIds: [ID!]!
}

type OrganizationBrandFileDeleteBatchPayload {
  brand: OrganizationBrand
  files: [File!]!
}

input OrganizationUpdateInput {
  name: String
  organizationId: ID!
}

type OrganizationUpdatePayload {
  organization: Organization
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type PaymentIntent {
  amount: Int!
  clientSecret: String
  id: String!
}

input PaymentIntentCreateInput {
  orderId: String!
}

type PaymentIntentCreatePayload {
  paymentIntent: PaymentIntent
}

type PaymentMethod {
  billingDetails: PaymentMethodBillingDetails
  card: PaymentMethodCard
  id: String!
  type: String!
}

type PaymentMethodBillingDetails {
  city: String
  country: String
  email: String
  line1: String
  line2: String
  name: String
  phone: String
  postalCode: String
  state: String
}

type PaymentMethodCard {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
}

type PrintLocation {
  colorCount: Int!
  totalCostInCents: Int
}

type Product {
  id: ID!
  priceCents: Int!
  quote(includeFulfillment: Boolean, printLocations: [QuoteGeneratePrintLocationInput!]!, quantity: Int!): Quote!
}

input ProductKey {
  id: ID!
  prices: ProductPrice!
}

input ProductPrice {
  price: ProductPriceValue!
}

input ProductPriceValue {
  value: Float!
}

type Query {
  _products(products: [ProductKey!]!): [Product]
  designProduct(id: ID!): DesignProduct
  designProof(id: ID!): DesignProof
  designRequest(id: ID!): DesignRequest
  membershipInvite(id: ID!): MembershipInvite!
  order(id: ID!): Order
  userMemberships: [Membership!]!
  viewer: Membership
}

type Quote {
  id: ID!
  printLocationCount: Int!
  printLocations: [PrintLocation!]!

  """The cost of the product with shipping, taxes, and other."""
  productTotalCostCents: Int!

  """The cost of the product without shipping, taxes, or other."""
  productUnitCostCents: Int!
}

input QuoteGeneratePrintLocationInput {
  colorCount: Int!
}

type Scope {
  action: ScopeAction!
  resource: ScopeResource!
}

enum ScopeAction {
  CREATE
  DELETE
  READ
  UPDATE
}

enum ScopeResource {
  DesignProduct
  DesignProof
  DesignRequest
  DesignRequestRevisionRequest
  Integration
  Membership
  Order
  Organization
}

input StringFilterInput {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
  startsWith: String
}

type Subscriber {
  email: String!
  id: String!
}

input SubscriberCreateInput {
  email: String!
}

type SubscriberCreatePayload {
  subscriber: Subscriber
}

type Subscription {
  designRequestHistoryItemAdded(designRequestId: ID!): DesignRequestHistoryItemAddedPayload
}

type User {
  createdAt: DateTime
  email: String
  emailVerified: Boolean
  familyName: String
  givenName: String
  id: ID!
  lastLogin: DateTime
  loginsCount: Int
  name: String
  nickname: String
  organizations: [Organization!]!
  phoneNumber: String
  phoneVerified: Boolean
  picture: String
  updatedAt: DateTime
  username: String
}

input UserOrganizationCreateInput {
  name: String!
}

type UserOrganizationCreatePayload {
  membership: Membership
  organization: Organization
}

input UserSetOrganizationInput {
  membershipId: ID!
  organizationId: ID!
}

type UserSetOrganizationPayload {
  membershipId: String
  organizationId: String
}