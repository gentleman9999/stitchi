### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Catalog {
  categories: [Category!]
  createdAt: DateTime!
  id: ID!
  product(id: ID!): Material
  products(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    filter: CategoryFilterArg = {}

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MaterialConnection
  updatedAt: DateTime
}

type Category {
  breadcrumbs: [Category!]
  catalogId: String!
  children: [Category!]
  createdAt: DateTime!
  id: ID!
  name: String!
  parentCategoryId: String
  slug: String!
  updatedAt: DateTime
}

input CategoryFilterArg {
  categoryId: Filter
}

type Color {
  category: ColorCategory
  colorCategoryId: String
  createdAt: DateTime
  hex: String
  id: ID!
  name: String
  updatedAt: DateTime
}

type ColorCategory {
  createdAt: DateTime
  hex: String
  id: ID!
  name: String!
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input Filter {
  eq: String
  in: [String]
}

enum GlobalRole {
  CUSTOMER
  SUPERADMIN
}

type Image {
  height: Int!
  id: ID!
  url: String!
  width: Int!
}

type Manufacturer {
  createdAt: DateTime!
  id: ID!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type Material {
  catalog: Catalog
  catalogId: String!
  categories: [Category!]
  colors: [Color!]
  createdAt: DateTime!
  id: ID!
  image: Image
  imageId: String
  isActive: Boolean!
  manufacturer: Manufacturer
  manufacturerId: String!
  name: String!
  primaryVendorId: String
  sizes: [Size!]
  style: String!
  updatedAt: DateTime
  variants: [MaterialVariant!]
  vendor: Vendor
}

type MaterialConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MaterialEdge]

  """Flattened list of Material type"""
  nodes: [Material]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type MaterialEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Material
}

type MaterialVariant {
  color: Color
  colorId: String
  createdAt: DateTime!
  gtin: String!
  id: ID!
  images: [Image!]
  isActive: Boolean!
  material: Material
  materialId: String!
  sizeId: String
  updatedAt: DateTime
  vendor: Vendor
  vendorId: String!
  vendorPartNumber: String!
}

type Membership {
  createdAt: DateTime!
  id: ID!
  organization: Organization
  organizationId: String!
  role: MembershipRole
  updatedAt: DateTime
  user: User
  userId: String!
}

enum MembershipRole {
  OWNER
}

type Mutation {
  """Bootstraps a new user with necessary resources"""
  userBoostrap: User
}

type Organization {
  createdAt: DateTime!
  id: ID!
  memberships: [Membership]
  name: String
  role: GlobalRole
  updatedAt: DateTime
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  catalog: Catalog
  viewer: Membership
}

type Size {
  createdAt: DateTime
  id: ID!
  name: String
  updatedAt: DateTime
  value: String!
}

type User {
  createdAt: DateTime
  email: String
  emailVerified: Boolean
  familyName: String
  givenName: String
  id: ID
  lastLogin: DateTime
  loginsCount: Int
  name: String
  nickname: String
  phoneNumber: String
  phoneVerified: Boolean
  picture: String
  updatedAt: DateTime
  username: String
}

type Vendor {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime
}
