import type { CodegenConfig } from '@graphql-codegen/cli'
import { loadEnvConfig } from '@next/env'

// @ts-ignore
loadEnvConfig(process.cwd())

const config: CodegenConfig = {
  overwrite: true, // overwrite the file every time
  schema: process.env.NEXT_PUBLIC_STITCHI_GRAPHQL_URI, // reference the local schema
  documents: 'src/**/*.{ts,tsx}', // look up gql operations in all .ts and .tsx files
  config: {
    declarationKind: 'interface', // use interfaces, not types (compatibile with Apollo)
    omitOperationSuffix: true, // don't automatically append 'Query' or 'Mutation'
    preResolveTypes: true, // use primitives where possible
    namingConvention: 'keep', // don't reformat any names
    avoidOptionals: {
      field: true, // Use `Maybe<T>` instead of `Maybe<T>?`, elminates need for undefined checking
    },
    skipTypenameForRoot: true, // Query and Mutation don't need typenames
    nonOptionalTypename: true, // automatically add __typename to all types, even if not selected

    /**
     * By GraphQL convention any query fields which are arrays have type
     * `ReadonlyArray<T> | <T>` which is the default type generated by GraphQL code generator.
     * But since Apollo Codegen used to generate them only as arrays i.e `ReadonlyArray<T>`,
     * we pass this field as true to avoid any typescript errors.
     */
    arrayInputCoercion: false,
  },
  generates: {
    'src/generated/types.ts': {
      plugins: [
        {
          /**
           * Since, GraphQL code generator doesn't disable eslint for us automatically,
           * we need to pass the disable comments to the content of the add plugin which will put
           * these comments at the top of our generated types file.
           */
          add: {
            content: `
              /** THIS FILE IS AUTO-GENERATED **/
              /** DO NOT EDIT **/
              /* eslint-disable */
              `,
          },
        },
        'typescript',
        'typescript-operations',
      ], // generate globalTypes and operationTypes in one pass
    },
    'src/generated/possibleTypes.ts': {
      plugins: ['fragment-matcher'], // generate possibleTypes
    },
  },
}

export default config
